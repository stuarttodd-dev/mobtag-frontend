[
  {
    "id": 1,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Best Practices - What is code rot? Code rot impacts productivity and morale, it is important to identify it and resolve it as soon as possible.",
    "meta_description": "Code rot is a form of Technical debt, which builds up over time. It is the process where the quality of the code deteriorates.",
    "title": "What Is Code Rot?",
    "slug": "what-is-code-rot",
    "description": "Code rot is a form of Technical debt, which builds up over time. It is the process where the quality of the code deteriorates.",
    "content": "<div class=\"subheading mb-3\">Overview</div>\n<p>Code rot is a form of <strong>Technical debt</strong>, which builds up over time. It is the process where the quality of the code deteriorates. It is largely unintentional (developers are not aware they're contributing to the code rot). However, it can be a conscience choice (lack of experience, knowledge or changing circumstances).</p>\n<p>Code rot impacts productivity and morale, it is important to identify it and resolve it as soon as possible.</p>\n<div class=\"subheading mb-3\">Causes / Symptoms</div>\n<p>Basically its caused by failing to maintain quality in our code and architecture.</p>\n<ul>\n<li>Cutting corners because of lack of experience of pressures from management, users or clients.</li>\n<li>Not keeping documentation up to date</li>\n<li>Not monitoring external dependencies for updates / changes.</li>\n</ul>\n<p><b>Unused code</b></p>\n<p>Sometimes code becomes unreachable and isn't required anymore but doesn't get removed (We might need it in future... maybe?), the years roll on, and literally no one understands what this code does and why its there.<p>\n<p>If it's not needed <strong>remove it</strong>.</p>\n\n<pre>\n<code class=\"language-php\">\n$someBoolean = false;\n// $someBoolean = $this->checkBooleanValue();\n\nif ($someBoolean === true) {\n    // Unused code here\n}\n</code>\n</pre>\n<br/>\n\n<p><b>Unreadable code</b></p>\n<p>When code is edited without any regard for quality it becomes unreadable. You should be following a coding standard, adding comments and docblocks <b>ALWAYS</b>. Code should be subject to peer review (assuming those peers aren't also cutting corners too!).</p>\n<p>After hundreds of edits it becomes a complete mess, people start avoiding it and waste hours trying to figure out whats going on.</p>\n\n<pre>\n<code class=\"language-php\">\nif (\n    $this->getSetting() === '1' ||\n    $this->getSetting() === '2' ||\n    ($this->getSetting() !== '1' && $this->someOtherSetting() === '1') ||\n    (\n    $this->getSetting() !== '2' && (\n    $this->someOtherSetting() === '1' || $this->someOtherSetting() === '5'))) {\n     // You get the picture!!\n    }\n</code>\n</pre>\n<br/>\n\n<p><b>Inconsistent data</b></p>\n<p>Over time, your database may start to accumulate inconsistent data, e.g you might have 7 flags which all do similar or the same thing.</p>\n<p>As platform requirements change there wasn't anything to refer to which might have made you realise not to add another database field and use what's already there.</p>\n\n<p>You could have database fields such as:</p>\n<ul>\n    <li>order_reference</li>\n    <li>order_ref</li>\n    <li>ref_order</li>\n</ul>\n\n<p>You'd struggle to figure out which one to use? Or maybe you need to update them all because they're all used in different places throughout the codebase. If you try and fix it (by removing some) you'll introduce bugs so they never get touched and the confusion continues for you and the next developer who comes along!</p>\n\n<p><b>Open for modification</b></p>\n<p>For me, this is the <b>biggest contributing factor</b>. If you leave code open for modification, it's going to cause you issues further down the line. It's also something which can go under the radar especially if you're making the change only takes a few minutes, i.e can you quickly adjust this? Or can you tweak this code?</p>\n<p>Seems fine, right? But as time progresses it becomes messy! If you try and push back and tell someone you might get ignored, because what you're suggesting might take a little more time and people can't see the issue with adding a few more lines of code.</p>\n\n<p>But what do I mean? Surely all code should be open for modification?</p>\n\n<p>Well... no, you should <b>extend your code where possible</b>. If coded correctly, the different behaviour to the standard version of the code would be attached or removed depending on given requirements.</p>\n<p>Check out SOLID principles and in particular - OCP - <a href=\"/article/5/solid-principles\">Solid Principles Explained</a></p>\n\n<p><b>Outdated documentation</b></p>\n<p>Documentation can be anything which helps with development. It needs to be maintained, if documentation becomes out of sync with the code, it's hard for the developer to determine the correct behaviour. Requirements can be missed (which means unhappy clients!) and developers will take longer to figure out whats going on and no one knows if it's working correctly or not.</p>\n\n<div class=\"subheading mb-3\">Consequences</div>\n<p>Avoiding code rot means a company can focus on developing new features. Efforts to prevent code rot should be ingrained into each developer, otherwise you're looking at damaging your code, your clients trust in you and your bottom line (£££!). Here are some of the main consequences you should actively try and active:</p>\n\n<p><b>Bugs, bugs, bugs!</b></p>\n<p>Code rot can hide existing bugs from developers and make it easy to introduce bugs when coding a new feature. If the code is unclear or data inconsistent, more bugs are going to crop up than if you were working on a clean codebase.</p>\n\n<p><b>Slow development</b></p>\n<p>Projects can be hard to navigate for developers if there's plenty of code rot to deal with. Simple changes (such as changing a dropdown) might end up taking days because of the state of the code.</p>\n<p>Start measuring how long projects generally take and look at the task given, if it's a simple task then something is definitely wrong.</p>\n\n<p><b>Low morale</b></p>\n<p>Who likes spending time working on bad code? Developers do not want to be working on bugs / fixes all the time. Personally, I want to be proud of what I'm doing and be delivering a quality product which satisfies the given requirements.</p>\n<p>Low morale means developer will decrease productivity and ultimiately end up leaving.</p>\n\n<div class=\"subheading mb-3\">Solution</div>\n<p>Assuming everyone now knows what code rot is, here are some solutions:</p>\n\n<p><b>Train</b></p>\n<p>Ensure developers are being trained and given the support they need. This means an ongoing training programme and being under the guidance of a competent technical lead, who is one hand to offer advice, solutions and point them in the right direction.</p>\n\n<p><b>Identify</b></p>\n<p>Identify areas which have code rot should be flagged for a rewrite (but properly this time!). Extend the code rather than leaving it open for modification (otherwise it'll need another rewrite before you know it).</p>\n\n<p><b>Test</b></p>\n<p>Create a testing suite and unit test areas of your code, to ensure they work as they should! Developers should feel confident making changes knowing that their change can be tested.</p>\n\n<p><b>Document</b></p>\n<p>This includes comments, docblocks and general documentation which helps developers understand what the code is doing! If a bug does arise, it can then be fixed in the right way, or if a new feature is required, you know what you can reuse within the system.</p>\n\n<p><b>Stay calm</b></p>\n<p>It's going to take time but as long as you've got the right leadership and they've started tackling the issue then you're good. There's no point re-platforming (thinking that is the solution) if you're going to keep making the same mistakes and not address the root causes (in a few years time you're back in the same situation).</p>",
    "active": 1,
    "position": 0,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 2,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Uncle Bob - Clean code YouTube videos",
    "meta_description": "Recommended informative free YouTube videos from Uncle Bob.",
    "title": "Uncle Bob",
    "slug": "uncle-bob",
    "description": "Recommended informative free YouTube videos from Uncle Bob.",
    "content": "<p><strong>I cannot recommend Uncle Bob enough.</strong> He is most recognised for developing many software design principles and for being a founder of the influential Agile Manifesto. </p>\r\n<p>Here's a bunch of free content available on YouTube. They highlight the importance of <strong>NOT</strong> creating a mess to code and the impact it can have.</p>\r\n<ul>\r\n<li><a href=\"https://www.youtube.com/watch?v=Wibk0IfjfaI\">FULL EPISODE // Clean Code with Uncle Bob Episode 1</a> (This one is amazing!)</li>\r\n<li><a href=\"https://www.youtube.com/watch?v=7EmboKQH8lM\">Clean Code - Uncle Bob / Lesson 1</a></li>\r\n<li><a href=\"https://www.youtube.com/watch?v=2a_ytyt9sf8\">Clean Code - Uncle Bob / Lesson 2</a></li>\r\n<li><a href=\"https://www.youtube.com/watch?v=Qjywrq2gM8o&amp;list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj&amp;index=5\">Clean Code - Uncle Bob / Lesson 3</a></li>\r\n<li><a href=\"https://www.youtube.com/watch?v=58jGpV2Cg50&amp;list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj&amp;index=6\">Clean Code - Uncle Bob / Lesson 4</a></li>\r\n<li><a href=\"https://www.youtube.com/watch?v=sn0aFEMVTpA&amp;list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj&amp;index=6\">Clean Code - Uncle Bob / Lesson 5</a></li>\r\n<li><a href=\"https://www.youtube.com/watch?v=l-gF0vDhJVI&amp;list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj&amp;index=8\">Clean Code - Uncle Bob / Lesson 6</a></li>\r\n</ul>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\n<p>Check out the youtube channel: <a href=\"https://www.youtube.com/c/Cleancoders/playlists\">Clean Coders</a>.<br/>\r\nAdditionally, all content can be found on their website (cost involved): <a href=\"https://cleancoders.com/\">Clean Coders : Level up your code.</a></p>\r\n</div>",
    "active": 1,
    "position": 1,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-09 21:27:47"
  },
  {
    "id": 3,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Object Oriented Coding - Encapsulate what varies",
    "meta_description": "Identify aspects of your application that vary and separate from what stays the same.",
    "title": "Encapsulate What Varies",
    "slug": "encapsulate-what-varies",
    "description": "Identify aspects of your application that vary and separate from what stays the same.",
    "content": "<div class=\"subheading mb-3\">New Requirements</div>\n<p>Does the code change with every new requirement? If so, then its recommended that this code is pulled out and encapsulated somewhere else. Essentially separating code which is fixed and code which is constantly changing. </p>\n<p>But why? Later we can alter or extend the code without affecting the parts which don’t vary.</p>\n<div class=\"subheading mb-3\">Tips</div>\n<ul>\n<li>Always look for code thats changes with every new requirement.</li>\n<li>Alter or extend code that varies without affecting code which doesn’t.</li>\n<li>When using a design pattern, pay attention to this principle and how the pattern implements it.</li>\n</ul>\n<div class=\"subheading mb-3\">Example</div>\n<p>Here’s a system for ordering pancakes.</p>\n<div class=\"alert alert-info\" role=\"alert\">\n<p>Over time requests are going to be made which will force this code to change, i.e <strong>some pancakes might be taken off the menu or new ones may need to be added</strong>.</p>\n<p>If we changed this and accidentally made a mistake, we’re going to bring down the entire pancake ordering system.</p>\n</div>\n<pre><code class=\"language-php\">\nclass Pancake \n{\n  public function order($type) \n  {\n    if ($type === 'classic') {\n      $pancake = new ClassicPancake();\n    }\n\n    if ($type === 'blueberry') {\n      $pancake = new BlueBerryPancake();\n    }\n\n    if ($type === 'chocolate_chip') {\n      $pancake = new ChocolateChipPancake();\n    }\n\n    if ($type === 'banana') {\n      $pancake = new BananaPancake();\n    }\n\n    $pancake->cook();\n    $pancake->plate();\n    $pancake->addButter();\n\n    return $pancake;\n  }\n\n}\n\n</code></pre>\n<div class=\"alert alert-warning\" role=\"alert\">\nYou might come across similar blocks of code which probably make sense to be shifted into their own (similar group of) classes (imagine if you will, blocks of 5k lines of code in a controller).\n</div>\n<p><strong>Identify which parts of the code which vary</strong></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe code below will need to be updated with bits being added or removed.\n</div>\n<pre><code class=\"language-php\">\nif ($type === 'classic') {\n  $pancake = new ClassicPancake();\n}\n\nif ($type === 'blueberry') {\n  $pancake = new BlueBerryPancake();\n}\n\nif ($type === 'chocolate_chip') {\n  $pancake = new ChocolateChipPancake();\n}\n\nif ($type === 'banana') {\n  $pancake = new BananaPancake();\n}\n\n</code></pre>\n<p><strong>Encapsulate code somewhere else</strong></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBy using a PancakeFactory (Static Factory pattern) here, the creation of the concrete pancake class is separated from the pancake->order method.\n</div>\n<pre><code class=\"language-php\">\nclass Pancake \n{\n  public function order($type) \n  {\n    $pancake = PancakeFactory::make($type);\n\n    $pancake->cook();\n    $pancake->plate();\n    $pancake->addButter();\n\n    return $pancake;\n  } \n}\n\n</code></pre>\n<div class=\"alert alert-info\" role=\"alert\">\nNow any changes will need to make to the pancake menu can be carried out on the PancakeFactory class without affecting the rest of the code.\n</div>\n<pre><code class=\"language-php\">\nclass PancakeFactory \n{\n  public static function make($type) \n  {\n\n    if ($type === 'classic') {\n      return new ClassicPancake();\n    }\n\n    if ($type === 'blueberry') {\n      return new BlueBerryPancake();\n    }\n\n    if ($type === 'chocolate_chip') {\n      return new ChocolateChipPancake();\n    }\n\n    if ($type === 'banana') {\n      return new BananaPancake();\n    }\n\n    return null; // Maybe throw an exception here. \n  }\n}\n\n</code></pre>",
    "active": 1,
    "position": 2,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 4,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Object Oriented Coding - Composition Over Inheritance",
    "meta_description": "Inheritance isn’t all bad, but in some instances it doesn’t make sense to use it.",
    "title": "Composition Over Inheritance",
    "slug": "composition-over-inheritance",
    "description": "Inheritance isn’t all bad, but in some instances it doesn’t make sense to use it.",
    "content": "<div class=\"subheading mb-3\">What is inheritance?</div>\n<p>Inheritance is known as a <strong>IS-A</strong> relationship, i.e a dog <strong>IS A</strong> animal, a taxi <strong>IS A</strong> vehicle.</p>\n<p>With inheritance you can avoid code duplication by inheriting behaviours - it’s powerful but it can be reused and can lead to designs which are too rigid.</p>\n<pre><code class=\"language-php\">\nclass Dog extends Animal {}\nclass Animal {}\n\n$dog = new Dog();\n\nclass Taxi extends Vehicle {}\nclass Vehicle {}\n\n$taxi = new Taxi();\n\n</code></pre>\n<div class=\"subheading mb-3\">What is composition?</div>\n<p>Composition is known as an <strong>HAS-A</strong> relationship, i.e a dog <strong>HAS An</strong> owner, a taxi <strong>HAS A</strong> passenger.</p>\n<pre><code class=\"language-php\">\nclass Dog {}\nclass Owner {}\n\n$dog = new Dog(new Owner());\n\nclass Taxi {}\nclass Passenger {}\n\n$taxi = new Taxi(new Passenger());\n\n</code></pre>\n<div class=\"subheading mb-3\">But why favour this over inheritance?</div>\n<p><strong>Coffee shop problem</strong></p>\n<p>Consider a shop which sells coffee, they have a simple class which represents their coffee:</p>\n<pre><code class=\"language-php\">\nclass Coffee {\n    public function prepare() {}\n    public function cost() {}\n}\n\n</code></pre>\n<p>We start using inheritance to represent different types of coffee, by extending the base class (<strong>Coffee</strong>) and overriding the prepare and cost methods:</p>\n<pre><code class=\"language-php\">\nclass CoffeeWithMocha extends Coffee {}\nclass CoffeeWithButter extends Coffee {}\nclass CoffeeWithMilk extends Coffee {}\n\n</code></pre>\n<p>But what happens if we need a <strong>Coffee</strong> with <strong>Milk</strong> and <strong>Butter</strong>? Or there’s <strong>new</strong> <strong>toppings</strong>? What if the cost of <strong>Milk</strong> changes, we’re going to have to make several changes across the classes where a <strong>Coffee</strong> has <strong>Milk</strong>.</p>\n<p>Potentially the code here isn’t extensible or maintainable (in the long term).</p>\n<p>How about redefining the relationships? Instead of <strong>CoffeeWithButter IS-A Coffee</strong>, why not consider <strong>Coffee HAS-A Condiment</strong>? (Lets favour composition over inheritance in this example).</p>\n<p><strong>The solution</strong></p>\n<p>Inheritance isn’t all bad, but in some instances it doesn’t make sense to use it. We could use inheritance to set up a group of <strong>Condiments</strong>.</p>\n<pre><code class=\"language-php\">\nclass Condiment {\n    public function prepare() {}\n    public function cost() {}\n}\n\nclass Mocha extends Condiment {}\nclass Butter extends Condiment {}\nclass Milk extends Condiment {}\nclass Caramel extends Condiment {}\n\n</code></pre>\n<p>We could add attach the <strong>Condiments</strong> to the <strong>Coffee</strong> class.</p>\n<pre><code class=\"language-php\">\nclass Coffee {\n\n    public $condiments = [];\n\n    public function prepare() {}\n    public function cost() {}\n\n    public function addCondiment(Condiment $condiment) {\n       $this->condiments[] = $condiment;\n    }\n}\n\n$coffee = New Coffee();\n$coffee->addCondiment(New Butter());\n$coffee->addCondiment(New Milk());\n\n</code></pre>\n<div class=\"subheading mb-3\">Whats changed?</div>\n<ul>\n<li>We can add any number of condiments easily at runtime.</li>\n<li>There’s no code duplication issues (i.e what happens we if now need to change the price of <strong>Milk</strong>?)</li>\n<li>Avoided a class explosion we were seeing each time we needed a new <strong>Coffee</strong> variant.</li>\n</ul>",
    "active": 1,
    "position": 3,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 5,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Best Practices - SOLID Software Principles Explained",
    "meta_description": "Attempting to write code which satisfies the current requirements and future requirements should be the goal.",
    "title": "SOLID Principles Explained",
    "slug": "solid-principles",
    "description": "Attempting to write code which satisfies the current requirements and future requirements should be the goal.",
    "content": "<div class=\"alert alert-success\"><b>Attempting to write code which satisfies the current requirements and future requirements should be the goal.</b></div>\n<div class=\"subheading mb-3\">Single Responsibility Principle (SRP)</div>\n<p><b>A class should have a single responsibility and thats it!</b>  E.g open a database, fetch certain data from database, send an email. If these needed to be changed in future you’d be changing it in one place, one class, not several.</p>\n<p><a href=\"https://laracasts.com/series/solid-principles-in-php/episodes/1\" target=\"_blank\">https://laracasts.com/series/solid-principles-in-php/episodes/1</a></p>\n<div class=\"alert alert-danger\"><b>What not to do!</b></div>\n<pre>\n<code class=\"language-php\">\nclass DoSomeStuff() {\n    public function __construct() {\n        echo 'Open Database';\n        echo 'Pull data from Database';\n        echo 'Send an email';\n    }\n}\n\nclass DoSomeOtherStuff() {\n    public function __construct() {\n        echo 'Open Database';\n        echo 'Pull data from Database';\n        echo 'Log some data';\n    }\n}\n</code></pre>\n<div class=\"alert alert-success\"><b>What to do!</b></div>\n<pre>\n<code class=\"language-php\">\nclass DoSomeStuff() {\n    public function __construct()\n    {\n        new SendEmail(new PullData(new Db()));\n    }\n}\n\nclass DoSomeOtherStuff() {\n    public function __construct()\n    {\n        new LogSomeData(new PullData(new Db()));\n    }\n}\n\nclass Db() {\n    public function __construct()\n    {\n        echo 'Open Database';\n    }\n}\n\nclass PullData()) {\n    public function __construct(Db $db)\n    {\n        // You'd use $db here but for the sake of the example...\n        echo 'Pull data from Database';\n    }\n}\n\nclass SendEmail() {\n    public function __construct(PullData $data)\n    {\n        // You'd use $data here but for the sake of the example...\n        echo 'Send an email';\n    }\n}\n\nclass LogSomeData() {\n    public function __construct(PullData $data)\n    {\n        // You'd use $data here but for the sake of the example...\n        echo 'Log some data';\n    }\n}\n</code></pre>\n<div class=\"subheading mb-3\">Open / Closed Principle (OCP)</div>\n<p><b>Entities should be CLOSED for modification but OPEN for extension.</b> Basically, it should be simple to change the behaviour of a class, without changing its source code.</p>\n<p>If you manage to adhere to this, you’d <b>prevent code rot or seeing code which is at the point where you’re actually afraid to touch it</b> (Imagine continually editing a class or a function so its over 3k lines of code).</p>\n<p><a href=\"https://laracasts.com/series/solid-principles-in-php/episodes/2\" target=\"_blank\">https://laracasts.com/series/solid-principles-in-php/episodes/2</a></p>\n<div class=\"alert alert-danger\"><b>What not to do!</b></div>\n<pre>\n<code class=\"language-php\">\nclass Square {\n    public $width;\n    public $height;\n\n    function __construct($height, $width)\n    {\n        $this->height = $height;\n        $this->width = $width;\n    }\n\n}\n\nclass Circle {\n\n    public $radius;\n\n    function __construct($radius)\n    {\n        $this->radius = $radius;\n    }\n\n}\n\n// This would calculate the area of all given shapes\nclass AreaCalculator {\n\n    public function calculate($shapes)\n    {\n        $area = 0;\n\n        foreach ($shapes as $shape) {\n\n            // This breaks OCP, imagine if we need to add a different shape (Triangle)\n            // We'd have to modify this code AGAIN\n            // Imagine years down the line, what would the code then look like..\n            // This file is OPEN for modification\n            if ($shape instanceof (Square)) {\n                $area += $shape->width * $shape->height;\n            } elseif ($shape instanceof (Circle)) {\n                $area += $shape->radius * $shape->radius * pi();\n            }\n        }\n\n        return $area;\n    }\n}\n</code></pre>\n<div class=\"alert alert-success\"><b>What to do!</b></div>\n<p>If you did come across this code, you’d ideally want to separate the behaviour (in this case our <b>potentially increasing IF … ELSE IF</b> case) behind an interface.</p>\n<p><b>An interface is a contract which classes (that implement it) MUST adhere to</b> - otherwise the code will break.</p>\n<p>In the example below we’re going to force our shape classes to have an area method and move the logic which works out a shapes area into that method.</p>\n<pre>\n<code class=\"language-php\">\ninterface ShapeInterface {\n    public function area();\n}\n\nclass Circle implements ShapeInterface {\n    public $radius;\n\n    function __construct($radius)\n    {\n        $this->radius = $radius;\n    }\n\n    public function area()\n    {\n        return $this->radius * $this->radius * pi();\n    }\n}\n\nclass Square implements ShapeInterface {\n    public $width;\n    public $height;\n\n    function __construct($height, $width)\n    {\n        $this->height = $height;\n        $this->width = $width;\n    }\n\n    public function area()\n    {\n        return $this->width * $this->height;\n    }\n}\n\n// This would calculate the area of all given shapes\nclass AreaCalculator {\n\n    // Type hinting to an interface means we know for sure that\n    // whatever is passed in definitely has an area() function\n    public function calculate(ShapeInterface $shapes)\n    {\n        $area = 0;\n        // This would never, ever, ever now need to be changed\n        // You'd only change the area method within a shapes class.\n        // No more code rot here!\n        foreach ($shapes as $shape) {\n            $area += $shape->area();\n        }\n        return $area;\n    }\n}\n</code></pre>\n<div class=\"subheading mb-3\">Liskov’s Substitution Principle (LSP)</div>\n<p>Classes which extend others (subclasses) should be able to be substituted wherever that class (that they’re extending) is utilised. Basically, subclasses should return the same as the class they’re extending, if overriding a method.</p>\n<p><a href=\"https://laracasts.com/series/solid-principles-in-php/episodes/3\" target=\"_blank\">https://laracasts.com/series/solid-principles-in-php/episodes/3</a></p>\n<div class=\"alert alert-danger\"><b>What not to do!</b></div>\n<pre>\n<code class=\"language-php\">\nclassA {\n    function someFunction()\n    {\n        return 'someString';\n    }\n}\n\nclassB extends ClassA {\n    function someFunction()\n    {\n        // Breaks LSP, its not returning a String (Like ClassA)\n        // Therefore you wouldnt be able to substitute ClassB for ClassA\n        return true;\n    }\n}\n</code></pre>\n<div class=\"alert alert-success\"><b>What to do!</b></div>\n<p>PHP has nothing which will validate a functions output, best you can do is to use doc blocks.</p>\n<p>In the example below you would now be safety able to substitute ClassB wherever you’ve got ClassA (Both return a string).</p>\n<pre>\n<code class=\"language-php\">\nclassA {\n    /**\n    * Some function which returns a string\n    *\n    * @return string\n    */\n    function someFunction()\n    {\n        return 'someString';\n    }\n}\n\nclassB extends ClassA {\n    /**\n    * Some function which returns a string\n    *\n    * @return string\n    */\n    function someFunction()\n    {\n        return 'someOtherString';\n    }\n}\n</code></pre>\n<div class=\"subheading mb-3\">Interface Segregation Principle (ISP)</div>\n<p><b>Classes shouldn’t be forced to implement Interface methods they do not need</b>. You may have classes which implement an interface and you don’t need them to implement every method, then you’re breaking ISP.</p>\n<p>To combat this you’d split your Interface accordingly.</p>\n<p><a href=\"https://laracasts.com/series/solid-principles-in-php/episodes/4\" target=\"_blank\">https://laracasts.com/series/solid-principles-in-php/episodes/4</a></p>\n<div class=\"alert alert-danger\"><b>What not to do!</b></div>\n<p>In the example below, the <b>MilkmanInterface</b> works for a Milkman, but what about a Coder?</p>\n<pre>\n<code class=\"language-php\">\ninterface MilkmanInterface {\n    public function deliver();\n    public function walk();\n    public function talk();\n}\n\nclass Milkman implements MilkmanInterface {\n    public function deliver() {\n        return 'Milk delivery complete';\n    }\n\n    public function talk() {\n        return 'Hello!';\n    }\n\n    public function walk()\n    {\n        return '.... Footstep noises...';\n    }\n}\n\nclass Coder implements MilkmanInterface {\n\n    public function deliver() {\n        // Do nothing\n    }\n\n    public function code() {\n        echo 'Coding... I love SOLID principles!';\n    }\n\n    public function talk() {\n        echo 'GRUNT';\n    }\n\n    public function walk() {\n        echo 'My legs dont work...';\n    }\n\n}\n</code></pre>\n<div class=\"alert alert-success\"><b>What to do!</b></div>\n<p>You could split the Interfaces so they make more sense, such as:</p>\n<pre>\n<code class=\"language-php\">\ninterface Deliverable {\n    public function deliver();\n}\n\n// Im assuming all people can walk here....\ninterface Personable {\n    public function walk();\n    public function talk();\n}\n\ninterface Codeable {\n    public function code();\n}\n\nclass Milkman implements Deliverable, Personable {\n    public function deliver() {\n        return 'Milk delivery complete';\n    }\n\n    public function talk() {\n        return 'Hello!';\n    }\n\n    public function walk()\n    {\n        return '.... Footstep noises...';\n    }\n}\n\nclass Coder implements Codeable, Personable {\n    public function code() {\n        echo 'Coding... I love SOLID principles!';\n    }\n\n    public function talk() {\n        echo 'GRUNT';\n    }\n\n    public function walk() {\n        echo 'My legs dont work...';\n    }\n\n}\n</code></pre>\n<div class=\"subheading mb-3\">Dependency Inversion Principle (DIP)</div>\n<p>Code should depend on abstractions (classes that can not be directly Instantiated - i.e Interfaces or Abstract classes) and not concretions. Doing this, allows us to change whats passed into an object easily.</p>\n<p><a href=\"https://laracasts.com/series/solid-principles-in-php/episodes/5\" target=\"_blank\">https://laracasts.com/series/solid-principles-in-php/episodes/5</a></p>\n<div class=\"alert alert-danger\"><b>What not to do!</b></div>\n<p>In the example, why does <b>PasswordReminder</b> need to know about how we connect to our database? It only needs to know there's some database connection it can work with.</p>\n<p>If we needed to connect to a MSSQL database, you’d have to make some tweaks as we’re locked into using <b>MySQLConnection</b>.</p>\n<pre>\n<code class=\"language-php\">\nclass PasswordReminder {\n    /**\n    * @var MySQLConnection\n    */\n    private $dbConnection;\n\n    public function __construct(MySQLConnection $dbConnection) // Breaks DIP\n    {\n        $this->dbConnection = $dbConnection;\n    }\n}\n</code></pre>\n<div class=\"alert alert-success\"><b>What to do!</b></div>\n<p>Instead, you’d <b>code to an Interface</b>, and <b>type hint the construct parameter</b>. The low-level code (<b>MySQLConnection</b> and <b>MSSQLConnection</b>) depends the abstraction (its extending the Interface).</p>\n<p>The high-level code (<b>PasswordReminder</b>) is expecting an object which implements the Interface (type hinting). Now you can pass different database connections to the construct.</p>\n<pre>\n<code class=\"language-php\">\ninterface ConnectionInterface {\n    public function connect();\n}\n\nclass MySQLConnection implements ConnectionInterface {\n    public function connect()\n    {\n        // Code to connect to database here.\n    }\n}\n\nclass MSSQLConnection implements ConnectionInterface {\n    public function connect()\n    {\n        // Code to connect to database here.\n    }\n}\n\nclass PasswordReminder {\n    /**\n    * @var ConnectionInterface\n    */\n    private $dbConnection;\n\n    public function __construct(ConnectionInterface $dbConnection)\n    {\n        $this->dbConnection = $dbConnection;\n    }\n}\n</code></pre>",
    "active": 1,
    "position": 4,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 6,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Best Practices - SQL Optimisation",
    "meta_description": "More often than not the initial database design works fine at the beginning, however as time goes on, changes are made and the data grows. Bottlenecks appear, you pick up a bunch of slow queries or you run out of storage.",
    "title": "SQL Optimisation",
    "slug": "sql-optimisation",
    "description": "More often than not the initial database design works fine at the beginning, however as time goes on, changes are made and the data grows. Bottlenecks appear, you pick up a bunch of slow queries or you run out of storage.",
    "content": "<div class=\"subheading mb-3\">Overview</div>\n<p>More often than not the initial database design works fine at the beginning, however as time goes on, changes are made and the data grows. Bottlenecks appear, you pick up a bunch of slow queries or you run out of storage. It is very important to perform regular checks and fix the actual issues (as supposed to caching everything to mask the problem).</p>\n<div class=\"subheading mb-3\">Query optimisation</div>\n<p>There's a few techniques and tips which can be useful!</p>\n<p><b>Only select what you need</b></p>\n<p>It's always faster to list the columns you need rather than pulling all of them.</p>\n<pre>\n<code class=\"language-php\">\n// Don't select everything\nSELECT * FROM users;\n\n// Only select what you need\nSELECT forename, surname, address FROM users;\n</code>\n</pre>\n<p><br/></p>\n<p><b>Avoid SELECT DISTINCT</b></p>\n<p>SELECT DISTINCT is a way to remove duplicates from your query. It groups all fields in a query to create a distinct result set. This process can be quite costly and a large amount of processing power is required. Data may also be grouped inaccurately.</p>\n<p>Select more fields and try and avoid using DISTINCT. Also, establish why the duplicates exist in the first place!</p>\n<pre>\n<code class=\"language-php\">\n// Using DISTINCT can be costly\nSELECT DISTINCT forename, surname, address FROM users;\n\n// Select more fields and use other means to remove duplicate entries\n// Also, implement some strategy to remove the root cause of the duplication\nSELECT forename, surname, address, postcode, date_of_birth FROM users;\n</code>\n</pre>\n<p><br/></p>\n<p><b>The power of INNER JOIN</b></p>\n<p>Some SQL developers prefer to make joins with WHERE clauses, such as the following:</p>\n<pre>\n<code class=\"language-php\">\n    SELECT u.id, u.forename, u.surname\n      FROM users u, user_logs ul\n     WHERE ul.user_id = u.user_id;\n</code>\n</pre>\n<p>This is known as a <b>Cartesian Join</b> or <b>CROSS JOIN</b>. All possible combinations of the variables are created. If you had 10 users with 10 logs, the query would first generate 100 results then apply a filter where the ids are correctly joined.</p>\n<p>It is seen as an inefficient use of database resources, it's done much more work than is required. Use an <b>INNER JOIN</b> instead:</p>\n<pre>\n<code class=\"language-php\">\n    SELECT u.id, u.forename, u.surname\n      FROM users u\nINNER JOIN user_logs ul\n        ON ul.user_id = u.user_id;\n</code>\n</pre>\n<p><br/></p>\n<p><b>Use WHERE instead of HAVING</b></p>\n<p><b>HAVING</b> statements are calculated after <b>WHERE</b> statements. If the intent is to filter a query based on conditions, a WHERE statement is more efficient.</p>\n<p>For example, let’s assume 200 sales have been made in the year 2016, and we want to query for the number of sales per customer in 2016.</p>\n<pre>\n<code class=\"language-php\">\n    SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)\n      FROM Customers\nINNER JOIN Sales\n        ON Customers.CustomerID = Sales.CustomerID\n  GROUP BY Customers.CustomerID, Customers.Name\n    HAVING Sales.LastSaleDate BETWEEN '01/01/2016' AND '12/31/2016'\n</code>\n</pre>\n<p>This query would pull 1,000 sales records from the Sales table, then filter for the 200 records generated in the year 2016, and finally count the records in the dataset.</p>\n<p>In comparison, <b>WHERE</b> clauses limit the number of records pulled:</p>\n<pre>\n<code class=\"language-php\">\n    SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)\n      FROM Customers\nINNER JOIN Sales\n        ON Customers.CustomerID = Sales.CustomerID\n     WHERE Sales.LastSaleDate BETWEEN '01/01/2016' AND '12/31/2016'\n  GROUP BY Customers.CustomerID, Customers.Name\n</code>\n</pre>\n<p>This query would pull the 200 records from the year 2016, and then count the records in the dataset. The first step in the HAVING clause has been completely eliminated.</p>\n<p><b>HAVING</b> should only be used when filtering on an aggregated field. In the query above, we could additionally filter for customers with greater than 5 sales using a HAVING statement.</p>\n<pre>\n<code class=\"language-php\">\n    SELECT Customers.CustomerID, Customers.Name, Count(Sales.SalesID)\n      FROM Customers\nINNER JOIN Sales\n        ON Customers.CustomerID = Sales.CustomerID\n     WHERE Sales.LastSaleDate BETWEEN '01/01/2016' AND '12/31/2016'\n  GROUP BY Customers.CustomerID, Customers.Name\n    HAVING Count(Sales.SalesID) > 5\n</code>\n</pre>\n<p><br/></p>\n<p><b>Use wildcards carefully</b></p>\n<p>Using wildcards should be treated with care. Wildcard (%) can be placed before and after a search. When used this way, the database is tasked with searching all records for a match anywhere in the selected field. It can be inefficient.</p>\n<pre>\n<code class=\"language-php\">\n    SELECT name FROM countries WHERE name LIKE '%ug%'\n</code>\n</pre>\n<p>This would return <b>Uganda</b>, <b>Uruguay</b> and <b>Portugal</b>.<p>\n<p>Sometimes only consider using a wildcard after the phase. It can lead to more accurate results and put less strain on the database.</p>\n<pre>\n<code class=\"language-php\">\n    SELECT name FROM countries WHERE name LIKE 'ug%'\n</code>\n</pre>\n<p>This would return <b>Uganda</b>.<p>\n\n<p><b>Use LIMIT to sample query results</b></p>\n<p>Say you're got a large table full of data. If you query it, it could be returning thousands and thousands of rows (which can be slow), consider using a LIMIT. With a LIMIT (and maybe an OFFSET) you can chunk the result set.</p>\n<p>It prevents taxing the database with a large query.</p>\n\n<div class=\"subheading mb-3\">When to use indexes?</div>\n\n<p>An index is meant to speed up the performance of a database. You'd use indexing whenever it improves the performance of your database. As the database becomes larger, you're more likely to see the benefits of using an index.</p>\n<p>Indexes aren't perfect though. When data is being written to a database, the original table is updated first and then all the table indexes (if you're got loads then inserting or updating a table is going to be slow).</p>\n<p>A balance between inserting/updating and selecting needs to be struck. If the bulk of your updating is carried out off-peak (i.e over night) then indexing is the way to go, but if you're got a table which is constantly being updated, then you need to be careful.</p>\n\n<ul>\n<li>If used correctly, indexing can vastly reduce the time of queries</li>\n<li>Every table with a primary key has one clustered index</li>\n<li>Every table can have many non-clustered indexes to aid in querying</li>\n<li>Not every database will benefit from indexing</li>\n<li>Not every index will increase the query speed for the database</li>\n</ul>\n\n<div class=\"subheading mb-3\">Primary and Foreign Keys</div>\n<p>A primary key is a column in a table that is used as a unique identifier for each row. It's basically a unique identifier for a database row. A table's primary key column thus must be unique, and it cannot be empty or NULL. A foreign key is different, it links two tables together.</p>\n<p><b>Why would you use a foreign key?</b></p>\n<p>You can easily set up an ID which matches across two tables without using a foreign key but this may lead in some data inconsistencies. If a column is assigned a foreign key, each row of that column must contain a value that exists in the 'foreign' column it references.</p>\n<p>The real purpose of foreign keys is that they add a restriction: entries to the table with a foreign key must have a value that corresponds with the 'foreign' table column. It is considered best practice to use them as much as possible.</p>\n\n<div class=\"subheading mb-3\">N+1 problem</div>\n<p>Usually developers add N+1 problems without realising it. Say you've got this query:</p>\n\n<pre>\n<code class=\"language-php\">\n// Get users\nSELECT id, forename, surname, address, postcode, date_of_birth FROM users;\n</code>\n</pre>\n\n<p>Then say we need to pull a user's log activity, so we loop through that query (via code) and execute this:</p>\n<pre>\n<code class=\"language-php\">\n// Get user logs using the id from row found from the above query\nSELECT logs FROM user_logs WHERE user_id = [USER_ID];\n</code>\n</pre>\n<p><b>For every user, we're going to execute an additional query. This is the N+1 problem.</b> If you pull thousands of users, you're going to be executing thousands of additional 'user_logs' database queries, which is going to impact speed.</p>\n\n<pre>\n<code class=\"language-php\">\n// Get user logs using the id from row found from the above query\nSELECT logs FROM user_logs WHERE user_id IN ([COMMA_SEPARATED_LIST_OF_USER_IDS]);\n</code>\n</pre>\n<p>You'd then use code to access and assign the data accordingly.</p>\n\n<p><b>The Solution</b></p>\n<p>Try and pull what you need in the least amount of queries possible, you could JOIN on the 'users_logs' table and process the data, or alternatively, gather a list of user ids from the first query and execute something like this:</p>\n\n<div class=\"subheading mb-3\">Database structure</div>\n<p>Sometimes theres no other option to change the structure of the database to ensure performance expectations are met. Not every change needs to be major, sometimes a minor change will do the trick! And remember <b>ALWAYS</b> consider a database design before any coding takes place and if you get given a chance to improve the database structure (such as migrating to a new platform) - <b>take it</b>.</p>\n<p>Here are some suggestions:</p>\n\n<p><b>Don't duplicate</b></p>\n<p>If teams don't communicate or document what they're working on you may end up creating several solutions to the same problem which results in duplicated database fields, i.e:</p>\n\n<ul>\n<li>order_reference</li>\n<li>order_ref</li>\n<li>ref_order</li>\n</ul>\n\n<p>It may get to the point where this cannot be changed as removing them could result in platform bugs.</p>\n\n<p><b>Pre calculating fields</b></p>\n<p>If there's operations which need to constantly compute values then it's better to compute them when they're being wrote into the database. Add that value to a new column. This technique can save time when retrieving the data, especially on large datasets.</p>\n<p><i>Side note</i> - try and do this real time (as the data is being updated or inserted, rather than a scheduled background task as the computed value may get out of date.</p>\n\n<p><b>Database denormalisation</b></p>\n<p>Normalisation of a database ensures that data redundancy is reduced and the data integrity increases. Normalisation, however, has a major drawback, many levels of tables are created and being able to pull the data you need can result in poor performing queries.</p>\n<p>Normalisation comes in various forms (denormalisation is the process of rolling back one of three stages of normalisation), you need to decide which one works for your given situation:</p>\n\n<p><u>1st Normal Form (1NF)</u></p>\n<p>The goal here is to ensure that a single field doesn't contain multiple values. If a table contains a multi valued attribute then it violates 1NF. <b>In the example below, there's 2 telephone numbers in one field:</b></p>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Forename</td>\n            <td>Surname</td>\n            <td>Phone Number</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Stuart</td>\n        <td>Todd</td>\n        <td>07540154040, 07540154041</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>A duplicate row (apart from the telephone number) would be created to satisfy 1NF:</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Forename</td>\n            <td>Surname</td>\n            <td>Phone Number</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Stuart</td>\n        <td>Todd</td>\n        <td>07540154040</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Stuart</td>\n        <td>Todd</td>\n        <td>07540154041</td>\n    </tr>\n    </tbody>\n</table>\n<br/>\n<p><u>2nd Normal Form (2NF)</u></p>\n<p>The database table needs to considered to be in the 1NF form. Best way to describe 2NF is with an example, say we have a set of goals which are attached to an employee and we note down their age, so we end up with something like this:</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Goal</td>\n            <td>Employee ID</td>\n            <td>Age</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Go for a run!</td>\n        <td>1</td>\n        <td>38</td>\n    </tr>\n        <tr>\n        <td>1</td>\n        <td>Read a book!</td>\n        <td>2</td>\n        <td>45</td>\n    </tr>\n    </tbody>\n</table>\n<p>Each field has a single piece of data so we definitely fulfils 1NF, however we have a non-key attribute (age), this 'goal' table doesn't need to know about it and its dependent on the Employee ID.</p>\n<p>The solution is to split the table and attach the age to the employee record:</p>\n\n<p>Table 1</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Goal</td>\n            <td>Employee ID</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Go for a run!</td>\n        <td>1</td>\n    </tr>\n        <tr>\n        <td>1</td>\n        <td>Read a book!</td>\n        <td>2</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>Table 2</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>Employee ID</td>\n            <td>Age</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>38</td>\n    </tr>\n        <td>2</td>\n        <td>45</td>\n    </tr>\n    </tbody>\n</table>\n<br/>\n<p><u>3rd Normal Form (3NF)</u></p>\n<p>The database table needs to considered to be in the 2NF form. Best way to describe 2NF is with an example, say we have an employee, who has a department ID and that department has a name, so we end up with something like this:</p>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Department ID</td>\n            <td>Department Name</td>\n            <td>Forename</td>\n            <td>Surname</td>\n            <td>Phone Number</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>1</td>\n        <td>Development</td>\n        <td>Stuart</td>\n        <td>Todd</td>\n        <td>07540154040</td>\n    </tr>\n        <tr>\n        <td>1</td>\n        <td>1</td>\n        <td>Marketing</td>\n        <td>Bob</td>\n        <td>Smith</td>\n        <td>07540154010</td>\n    </tr>\n    </tbody>\n</table>\n<p>A department has an ID and a name, and both go hand in hand, potentially here, you add another row with the same department ID but change the name - which can lead to some inconsistencies (As above).</p>\n<p>The solution is to split the table and create a relationship between them:</p>\n\n<p>Table 1</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Department ID</td>\n            <td>Forename</td>\n            <td>Surname</td>\n            <td>Phone Number</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>1</td>\n        <td>Stuart</td>\n        <td>Todd</td>\n        <td>07540154040</td>\n    </tr>\n        <tr>\n        <td>1</td>\n        <td>2</td>\n        <td>Bob</td>\n        <td>Smith</td>\n        <td>07540154010</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>Table 2</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>ID</td>\n            <td>Name</td>\n        </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Development</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Marketing</td>\n    </tr>\n    </tbody>\n</table>\n\n<p><b>Split tables</b></p>\n<p>Data such as images or videos or large pieces of text data can impact the query speed. The read time depends on the data size, therefore if the data size is huge, then its going to impact the performance of the query.</p>\n<p>In these instances, the larger fields can be split out into a separate table and the primary table being queried can escape that overhead.</p>\n\n<div class=\"subheading mb-3\">Ask the right questions</div>\n<p>Perhaps one of the more obvious ones. Listen to the business requirements and ask the right questions - what is the goal? Why does it need to happen that way? Can more than one be attached to it etc? Keep asking questions until you fully understand what needs to happen.</p>\n<p>This comes with experience but be curious and firmly establish the requirements, otherwise in the near future you're having to hack changes into your database structure to accomodate and before you know it, it turns into an unmanageable mess! The root of bugs and poor performance usually stems from a poor database structure.</p>\n\n<div class=\"subheading mb-3\">In Conclusion</div>\n<p>There's hints and tips on this page but ultimately optimising your database (and the code around it) is something you're going to have to experiment with.</p>\n<p>Log slow queries, set up a decent profiler, put a strategy in place which allows time to investigate and fix root issues (don't be the guy who solves everything by caching it) and do the basics - avoid the N+1 problem, use indexes, foreign keys, joins, only pull what you need and consider which normalisation form works best (etc etc etc). Good luck!</p>",
    "active": 1,
    "position": 5,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 7,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Best Practices - Writing Readable PHP tips and advice",
    "meta_description": "Tips and hints around writing readable PHP",
    "title": "Writing Readable PHP - general tips and advice",
    "slug": "writing-readable-php",
    "description": "Tips and hints around writing readable PHP",
    "content": "<div class=\"subheading mb-3\">Add breathing space</div>\n<div class=\"alert alert-danger\" role=\"alert\">\nTake a look at this piece of code, what would you say is wrong with it?\n</div>\n<pre><code class=\"language-php\">\n// Everything's cramped together.\npublic function getPage($url)\n{\n    $page = $this->pages()->where('slug', $url)->first();\n    if (! $page) {\n        return null;\n    }\n    if ($page['private'] && ! Auth::check()) {\n        return null;\n    }\n    return $page;\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nThis code is missing — what we like to call — \"breathing space\". Just like reading text, grouping code in paragraphs can be helpful to improve its readability. Have a look:\n</div>\n<pre><code class=\"language-php\">\npublic function getPage($url)\n{\n    $page = $this->pages()->where('slug', $url)->first();\n\n    if (! $page) {\n        return null;\n    }\n\n    if ($page['private'] && ! Auth::check()) {\n        return null;\n    }\n\n    return $page;\n}\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nOptimise readability for happy path\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\nHere's an example where the happy path is handled first. Try to read it: you'll notice that, besides some code overhead, it's also more confusing to understand what this code does from a first read.\n</div>\n<pre><code class=\"language-php\">\n// core functionality comes first, special cases handled at the end\npublic function sendMail(User $user, Mail $mail)\n{\n    if ($user->hasSubscription() && $mail->isValid()) {\n        $mail->send();\n    }\n\n    if (! $user->hasSubscription()) {\n        // throw exception\n    }\n\n    if (! $mail->isValid()) {\n        // throw exception\n    }\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nSo instead, let's first check and handle all edge cases followed by the happy path as the last step of the function. Conveniently, it doesn't need to be wrapped in a condition anymore if all edge cases have already been handled.\n</div>\n<pre><code class=\"language-php\">\n// special cases handled first, core functionality comes later\npublic function sendMail(User $user, Mail $mail)\n{\n    if (! $user->hasSubscription()) {\n        // throw exception\n    }\n\n    if (! $mail->isValid()) {\n        // throw exception\n    }\n\n    $mail->send();\n}\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nRemove blocks of commented / unreachable / dead code\n</div>\n<p>Everybody probably has at some point added some code that was only temporarily needed. Maybe you were trying to activate a feature or experiment with a variation. You might have commented out the code, with the sole purpose of uncommenting it should it be needed again.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nHowever, keeping commented code around hurts readability.\n</div>\n<pre><code class=\"language-php\">\n$basePrice = $this->calculateBasePrice();\n\n$tax = $this->calculateTax($basePrice);\n\n$price = $basePrice + $tax;\n\n/**\n  * Reactivate this when we run a promo;\n  * \n  * $discountPercentage = $this->getDiscountPercentage();\n  * \n  * $discountAmount = $price * $discountPercentage;\n  * \n  * $price = $price - $discountAmount;\n*/\n\n</code></pre>\n<div class=\"alert alert-danger\" role=\"alert\">\nAnother approach that people sometimes use is to put code in a statement that is never true, which makes the code unreachable.\n</div>\n<pre><code class=\"language-php\">\n$basePrice = $this->calculateBasePrice();\n\n$tax = $this->calculateTax($basePrice);\n\n$price = $basePrice + $tax;\n\nif (false) {\n    $discountPercentage = $this->getDiscountPercentage();\n    $discountAmount = $price * $discountPercentage;\n    $price = $price - $discountAmount;\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nIf the unused code is needed, but not at all times, you could opt to uncomment it and put it behind a feature flag, so you can toggle it on when desired.\n</div>\n<pre><code class=\"language-php\">\nfunction calculatePrice()\n{\n    $basePrice = $this->calculateBasePrice();\n    $tax = $this->calculateTax($basePrice);\n    $price = $basePrice + $tax;\n\n    if ($discountIsActive ?? false) {\n        $discountPercentage = $this->getDiscountPercentage();\n        $discountAmount = $price * $discountPercentage;\n        $price = $price - $discountAmount;\n    }\n\n    return $price;\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nIf you're not sure that the code will ever be needed again, you could delete the code. Commit the deletion with a good commit message like \"Remove discount calculation\". This way you can always find the code again in the history, should you need it.\n</div>\n<pre><code class=\"language-php\">\n$basePrice = $this->calculateBasePrice();\n$tax = $this->calculateTax($basePrice);\n\n$price = $basePrice + $tax;\n\n</code></pre>\n<p>A good rule of thumb is to think about comments as fundamental parts of your code: only add them where they add real value or information that's not immediately obvious from the surrounding context. If there are any other ways of achieving the same result, prefer that other approach:</p>\n<ul>\n<li>Adding a feature flag</li>\n<li>Use versioning with a clear commit message</li>\n</ul>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nGrouped related variables in class\n</div>\n<p>Classes often have properties. The order of these properties isn't really important for the PHP interpreter, but for humans it can matter.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nHere's a simple example where we are going to implement a Period class without making use of a date class such as Carbon.\n</div>\n<pre><code class=\"language-php\">\n// these properties are in a weird order\n\nclass Period\n{\n    protected int $startDay;\n    protected int $startYear;\n    protected int $endDay;\n    protected int $startMonth;\n    protected int $endYear;\n    protected int $endMonth;\n\n    // ...\n}\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nYou can improve this by putting properties in a logical order.\n</div>\n<pre><code class=\"language-php\">\n// these properties are in a logical order\nclass Period\n{\n    protected int $startYear;\n    protected int $startMonth;\n    protected int $startDay;\n    protected int $endYear;\n    protected int $endMonth;\n    protected int $endDay;\n\n    // ...\n}\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nNotice that it might still be difficult to quickly scan these variables. Grouping them by adding a newline improves readability.\n</div>\n<pre><code class=\"language-php\">\n// these properties are in a logic order and properly grouped\n\nclass Period\n{\n    protected int $startYear;\n    protected int $startMonth;\n    protected int $startDay;\n\n    protected int $endYear;\n    protected int $endMonth;\n    protected int $endDay;\n\n    // ...\n}\n\n</code></pre>\n<div class=\"alert alert-danger\" role=\"alert\">\nHowever, don't go overboard with this technique. If you end up with too many groups of a single property, that may hurt readability.\n</div>\n<pre><code class=\"language-php\">\nclass Period\n{\n    protected int $startYear;\n\n    protected int $startMonth;\n\n    protected int $startDay;\n\n    protected int $endYear;\n\n    protected int $endMonth;\n\n    protected int $endDay;\n\n    // ...\n}\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nBe consistent\n</div>\n<p>Naming files consistently, will help you find them faster through a search. Also, it will be easier to look through your app's structure.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nConsider this file structure. It can be confusing that not all files have the Action suffix. Is there are reason for that?\n</div>\n<pre><code class=\"language-php\">\nActions/ImportYouTubeVideos.php\nActions/GetTwitchStreamsAction.php\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nIf there is no specific reason, use the same suffix for the same kind of files. (Or vice versa - remove the suffix - just be consistent!)\n</div>\n<pre><code class=\"language-php\">\nActions/ImportYouTubeStreamsAction.php\nActions/ImportTwitchStreamsAction.php\n\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nAvoid using else\n</div>\n<p>As code tends to branch to different states, using else might seem inevitable. However the opposite is true. Using if, some boolean logic and &quot;early returns&quot; we can rewrite almost any if-else statement with only a simple if statements. This way we're avoiding a needlessly complex conditionals that would make our code harder to understand at a quick glance.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nIn this piece of code, it takes some brainpower to determine when each of those conditions will be reached.\n</div>\n<pre><code class=\"language-php\">\nif ($conditionA) {\n   if ($conditionB) {\n      // condition A and B passed\n   }\n   else {\n     // condition A passed, B failed\n   }\n}\nelse {\n   // condition A failed\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nUsing early returns this becomes much more readable, because there aren't as many nested paths to follow. Our code has become more linear.\n</div>\n<pre><code class=\"language-php\">\nif (! $conditionA) {\n   // condition A failed\n    return;\n}\n\nif (! $conditionB) {\n    // condition A passed, B failed\n    return;\n}\n\n// condition A and B passed\n\n</code></pre>\n<p>Should you end up with to many if statement, then consider refactoring to a lookup table or structure. If the conditions themselves are becoming too complex, you could refactor them to simpler functions.</p>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nGroup boolean return values\n</div>\n<p>When a function has multiple paths that return a boolean value, it can be worthwhile to group the paths with the same return values together. This allows us to mentally draw a line where the function's false code path ends and the true path starts.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nIn the following example, we're returning false, then true and then false again.\n</div>\n<pre><code class=\"language-php\">\npublic function someFunction()\n{\n   if ($this->someCondition()) {\n       return false;\n   }\n\n    if ($user->hasSubscription()) {\n        return false;\n    }\n\n    if ($this->anotherCondition()) {\n        return true; // not the same boolean as branches above\n    }\n\n    return false;\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nIn the refactored code, we made sure to always return false first and only return true at the end.\n</div>\n<pre><code class=\"language-php\">\npublic function someFunction()\n{\n    if ($this->someCondition()) {\n        return false;\n    }\n\n    if ($user->hasSubscription()) {\n       return false;\n    }   \n\n    if (! $this->anotherCondition()) { // reverse the condition\n        return false; // same boolean\n    }   \n\n    return true;\n}\n\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nOrder functions in a logical manner\n</div>\n<p>Multiple rules and guidelines exist to help you order the methods in a class. The most common approach is to start with the __construct() method and any static methods followed by the other methods ordered by visibility (public followed by protected and finally private).</p>\n<p>Whether you choose to follow this convention or not, it's often helpful to order the methods in order of being called.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nMethods are ordered randomly\n</div>\n<pre><code class=\"language-php\">\nclass BlogPost()\n{\n    public function publish(): self\n    {\n        $this\n            ->makePublic()\n            ->clearCache()\n            ->sendTweet();\n\n        return $this;\n    }\n\n    protected function sendTweet(): self\n    {\n        // ...\n    }\n\n    protected function makePublic(): self\n    {\n        // ...\n    }\n\n    protected function clearCache(): self\n    {\n        // ...\n    }\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nMethods are order in the order that they are being used\n</div>\n<pre><code class=\"language-php\">\n// methods are order in the order that they are being used\n\nclass BlogPost()\n{\n    public function publish(): self\n    {\n        $this\n        ->makePublic()\n        ->clearCache()\n        ->sendTweet();\n\n        return $this;\n    }\n\n    protected function makePublic(): self\n    {\n        // ...\n    }\n\n    protected function clearCache(): self\n    {\n        // ...\n    }\n\n    protected function sendTweet(): self\n    {\n        // ...\n    }\n}\n\n</code></pre>\n<p>When an object has a certain chronological lifecycle, it might be worthwhile to order the methods according to the lifecycle too. This is a pattern that you'll often find in models and controllers.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nMethods are ordered randomly\n</div>\n<pre><code class=\"language-php\">\n// methods are ordered randomly\n\nclass MyObject()\n{\n    public function delete();\n\n    public function create();\n\n    public function update();\n}\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nMethods are ordered according to lifecycle\n</div>\n<pre><code class=\"language-php\">\nclass MyObject()\n{\n    public function create();\n\n    public function update();\n\n    public function delete();\n}\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nRefactoring complex conditionals\n</div>\n<p>Code containing if statements that combine multiple conditionals using &amp;&amp; or || can quickly become cumbersome to read and parse mentally. Add some nested conditionals on top of that and you've got yourself a spaghetti code recipe.</p>\n<p>Readability for these if statements can be vastly increased by separating those complex conditionals to their most basic boolean form and moving any nested if statements to their own methods.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nAnother practical example is this piece of code, copied straight from a real legacy project.\n</div>\n<pre><code class=\"language-php\">\n// negations and || makes this code unreadable\n\nif (! $this->shipping_country === 'GB' || $this->status !== \"Valid\") {\n    return true;\n}\n\nreturn false;\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nConditional has been split\n</div>\n<pre><code class=\"language-php\">\nif ($this->shipping_country === 'GB') {\n    return false;\n}\n\nif ($this->status !== 'Valid') {\n    return false;\n}\n\nreturn true;\n\n</code></pre>\n<div class=\"alert alert-danger\" role=\"alert\">\nSometimes, the comparison itself can be hard to read especially when negated using !. In those scenarios introducing a new method might feel like it's overkill, but it will greatly improve readability.\n</div>\n<pre><code class=\"language-php\">\nif (! in_array($this->item->address->country, $listOfCountries)) {\n    return true;\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nExtracted to a method!\n</div>\n<pre><code class=\"language-php\">\nif ($this->isItemCountryOutsideOfEurope()) {\n    return true;\n}\n\n</code></pre>\n<p>If you have multiple nested if blocks, you could consider refactoring it to a dedicated function with early returns.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nLoads of nesting...\n</div>\n<pre><code class=\"language-php\">\nfunction foo()\n{\n    if ($someCondition) {\n        if ($anotherCondition) {\n            if ($yetAnotherCondition) {\n                // do something\n            }\n        }\n    }\n}\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nNo nesting!\n</div>\n<pre><code class=\"language-php\">\n// no nesting\n\nfunction foo()\n{\n    if (! $someCondition) {\n        return;\n    }\n\n    if (! $anotherCondition) {\n        return;\n    }\n\n    if (! $yetAnotherCondition) {\n        return;\n    }\n\n    // do something\n}\n\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nPut variables close to where they are used\n</div>\n<p>Variables should be introduced close to where they are being used. This way related code is grouped together, and will be easier to refactor.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nVariables are far away from where they are being used\n</div>\n<pre><code class=\"language-php\">\n$owners = $this->getOwners()\n$admins = $this->getAdmins();\n$guests = $this->getGuests();\n\n$this->process($owners);\n$this->process($admins);\n$this->process($guests);\n\n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nVariables are close to where they are used\n</div>\n<pre><code class=\"language-php\">\n$owners = $this->getOwners()\n$this->process($owners);\n\n$admins = $this->getAdmins();\n$this->process($admins);\n\n$guest = $this->getGuests();\n$this->process($guests);\n\n</code></pre>\n<p>Now imagine that support for guests users should be removed. It's easier to do so when the two related lines are grouped together. As an added bonus the git commit will look a lot cleaner with just one deletion in the diff.</p>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nMake sure boolean parameters are readable\n</div>\n<p>Passing booleans to a method can be a code smell, as it is not clear what a boolean does by reading the calling code.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nIt is not clear how this boolean will affect behavior\n</div>\n<pre><code class=\"language-php\">\n$this->getPrice(true); \n</code></pre>\n<div class=\"alert alert-success\" role=\"alert\">\nA common way to improve on this is by assigning the boolean to a temporary variable with a descriptive name.\n</div>\n<pre><code class=\"language-php\">\n$this->getPrice($includingTaxes = true);\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nUse ensure and guard methods\n</div>\n<p>Another commonly occurring pattern in functions and methods is to check if all requirements to execute the function are met before actually executing any real logic. These requirement checks can quickly overtake the function and drown out the code and logic that's actually important.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nBad!\n</div>\n<pre><code class=\"language-php\">\npublic function writeToDisk(Disk $disk, string $path, string $content): void\n{\n    if (! $disk->isConnected()) { // not writing to disk\n        $disk->connect();\n    }\n\n    $directory = pathinfo($path, PATHINFO_DIRNAME); // no disk writing here\n\n    if (! $disk->hasDirectory($directory)) { // still not writing to disk\n        $this->createDirectory();\n    }\n\n    $disk->write($path, $content); // finally, we're writing to disk\n}\n\n</code></pre>\n<p>These requirement checking code can be moved to one or more separate functions. In this case we'll call it ensureWriteable. This also helps with making it self-evident that writing to disk will only happen when the path is actually writable.</p>\n<div class=\"alert alert-success\" role=\"alert\">\nGood!\n</div>\n<pre><code class=\"language-php\">\npublic function writeToDisk(Disk $disk, string $path, string $content): void\n{\n    $this->ensureWritable($disk, $path);\n\n    $disk->write($path, $content);\n}\n\nprotected function ensureWriteable(Disk $disk, string $path): void\n{\n    if (! $disk->isConnected()) {\n        $disk->connect();\n    }\n\n    $directory = pathinfo($path, PATHINFO_DIRNAME);\n\n    if (! $disk->hasDirectory($directory)) {\n        $this->createDirectory();\n    }\n}\n</code></pre>\n<p>If you've just read about being expressive in naming methods, you might feel like makeSureThatDiskIsWritable is a more appropriate name. However, having the name start with ensure is better as the prefix is used by convention for these type of methods. When you come across a method that starts with the ensure prefix you can be certain that a requirement will be checked or a preparation is being made.</p>\n<p>Another prefix that is often used for these type of methods is guard. Often these guard methods will throw an exception when something is not in order as opposed to a ensure method that might try to fix the problem.</p>\n<p>In the following example you'll quickly see that five of the six lines are related to making sure that we're not saving an unexpected $mimeType.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nBad!\n</div>\n<pre><code class=\"language-php\">\npublic function saveFile(string $path, string $content): void\n{\n    $mimeType = mime_content_type($path);\n\n    if (! in_array($mimeType, $allowedMimeTypes)) {\n        $allowedMimeTypesString = implode(', ', $allowedMimeTypes);\n\n        $exceptionMessage = \"The file `{$path}` has an invalid type `{$mimeType}`. These are the allowed mime types: `{$allowedMimeTypesString}`\";\n\n        throw new Exception($exceptionMessage);\n    }\n\n    file_put_contents($path, $content);\n}\n</code></pre>\n<p>By refactoring the code to extract some of that logic to a guard method it becomes more clear what is actually happening when saveFile is called.</p>\n<div class=\"alert alert-success\" role=\"alert\">\nGood!\n</div>\n<pre><code class=\"language-php\">\npublic function saveFile(string $path, string $content): void \n{\n    $this->guardAgainstInvalidMimeType($path, $content);\n\n    file_put_contents($path, $content);\n}\n\nprotected function guardAgainstInvalidMimeType(string $path, array $allowedMimeTypes): void\n{\n    $mimeType = mime_content_type($path);\n\n    if (! in_array($mimType, $allowedMimeTypes)) {\n        $allowedMimeTypesString = implode(', ', $allowedMimeTypes);\n\n        $exceptionMessage = \"The file `{$path}` has an invalid type `{$mimeType}`. These are the allowed mime types: `{$allowedMimeTypesString}`\";\n\n        throw new Exception($exceptionMessage);\n    }\n}\n</code></pre>\n<p>By reversing the in_array condition, we can improve the guardAgainstInvalidMimeType even further. In the code above, you'll see that most of the code is indented because it lives in the if statement. By reversing the condition and returning early, we can &quot;flatten&quot; the code and make it easier to read.</p>\n<pre><code class=\"language-php\">\nprotected function guardAgainstInvalidMimeType(string $path, array $allowedMimeTypes): void\n{\n    $mimeType = mime_content_type($path);\n\n    if (in_array($mimeType, $allowedMimeTypes)) {\n        return;\n    }\n\n    $allowedMimeTypesString = implode(', ', $allowedMimeTypes);\n\n    $exceptionMessage = \"The file `{$path}` has an invalid type `{$mimeType}`. These are the allowed mime types: `{$allowedMimeTypesString}`\";\n\n    throw new Exception($exceptionMessage);\n}\n</code></pre>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nUse custom exceptions\n</div>\n<p>When things go wrong in your application, it's important to collect as much information as possible in the thrown exception. The most important piece of information being what went wrong and how to solve it. Most of this information can be contained in an expressive exception message but creating a custom, aptly named exception class is equally important. Finally, exceptions are what they say they are: an exception to the regular flow of your code. That's why, once again, it makes sense to extract them to a separate guard method.</p>\n<p>Here's a guard method you might recognise from the previous chapter. It throws a generic Exception if an unexpected mime type is used. Let's improve on that.</p>\n<div class=\"alert alert-danger\" role=\"alert\">\nBad!\n</div>\n<pre><code class=\"language-php\">\nprotected function guardAgainstInvalidMimeType(string $path, array $allowedMimeTypes): void\n{\n    $mimeType = mime_content_type($path);\n\n    if (in_array($mimeType, $allowedMimeTypes)) {\n        return;\n    }\n\n    $allowedMimeTypesString = implode(', ', $allowedMimeTypes);\n\n    $exceptionMessage = \"The file `{$path}` has an invalid type `{$mimeType}`. These are the allowed mime types: `{$allowedMimeTypesString}`\";\n\n    throw new Exception($exceptionMessage);\n}\n\n</code></pre>\n<p>Instead of creating the exception and crafting a good exception message inline, you could opt for a custom exception class. This custom exception class can be used to build up the exception message without cluttering the original method.</p>\n<div class=\"alert alert-success\" role=\"alert\">\nGood!\n</div>\n<pre><code class=\"language-php\">\nclass MimeTypeNotAllowed extends Exception\n{\n    public static function make(string $file, array $allowedMimeTypes): self\n    {\n        $mimeType = mime_content_type($file);\n\n        $allowedMimeTypes = implode(', ', $allowedMimeTypes);\n\n        return new self(\"File has a mime type of {$mimeType}, while only {$allowedMimeTypes} are allowed\");\n    }\n}\n</code></pre>\n<p>With that exception class in place, you can rewrite the original code.</p>\n<pre><code class=\"language-php\">\nprotected function guardAgainstInvalidMimeType(string $file, array $allowedMimeTypes)\n{\n    $mimeType = mime_content_type($file);\n\n    if (in_array($mimeType, $allowedMimeTypes)){    \n        return;\n    }   \n\n    throw MimeTypeNotAllowed::make($file, $allowedMimeTypes);\n}\n</code></pre>\n<p>Additionally, preparing custom exception classes makes it possible to catch the MimeTypeNotAllowed exception at a higher level to implement user friendly exception handling or validation errors.</p>",
    "active": 1,
    "position": 6,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 8,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Writing readable PHP - being expressive",
    "meta_description": "Being expressive when writing code makes it easier for people to understand your code and shows you care about the next developer who comes along.",
    "title": "Writing Readable PHP - being expressive",
    "slug": "being-expressive",
    "description": "Being expressive when writing code makes it easier for people to understand your code and shows you care about the next developer who comes along.",
    "content": "<div class=\"subheading mb-3\">\r\n</div>\r\n<p>To make code as readable as possible, you want names to convey as much meaning as possible.</p>\r\n<div class=\"subheading mb-3\">\r\nConvert comments to functions with a descriptive name\r\n</div>\r\n<p>When a function grows, you'll often end up with a lengthy piece of code that has comments describing various steps. Chances are that you can break up the code block and extract each step to its own function using each comments as an appropriate function name.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nConsider the following example where we'll fetch some data from an external API, process it, write it to a PDF and send the final file to a user:\r\n</div>\r\n<pre><code class=\"language-php\">\r\n// get and sanitize data\r\n$data = Http::get('https://some-api.com')->json();\r\n\r\nforeach ($data['items'] as $item) {\r\n // do stuff\r\n}\r\n\r\n// create pdf\r\n$directory = $user->getStorageDirectory();\r\n$template = $user->getPdfTemplate();\r\n(new Pdf())\r\n    ->create($template)\r\n    ->setData($data)\r\n    ->save($directory);\r\n\r\n// mail pdf\r\n$mail = (new Mail($user->email))\r\n        ->setSubject('your pdf')\r\n        ->send();\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nThis can easily be refactored to:\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$data = $this->getSanitizedPdfData();\r\n\r\n$pathToPdf = $this->createPdf($data, $user);\r\n\r\n$this->mailPdf($user, $mail);\r\n\r\n</code></pre>\r\n<p>As an added bonus, these new methods make excellent cases for unit tests!</p>\r\n<p>If you're using PhpStorm, you'll be happy to know that it allows you to easily refactor lines of code to a new function. It'll take care of passing the right arguments and returning the right result. To perform the refactor:</p>\r\n<ul>\r\n<li>select a piece of code </li>\r\n<li>right click, and select &quot;Refactor&quot; &gt; &quot;Extract method&quot;</li>\r\n<li>optionally edit the proposed function name and press ok to close the dialog.</li>\r\n</ul>\r\n<div class=\"subheading mb-3\">\r\nUse method name prefixes\r\n</div>\r\n<p>You can use prefixes to make your code sound more natural.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nBad!\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$status = $user->pending();\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nGood!\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$userIsPending = $user->isPending();\r\n\r\n</code></pre>\r\n<p>In most projects, suffixes like make, create, get or fetch also have a dedicated meaning.</p>\r\n<pre><code class=\"language-php\">\r\n$user = $this->makeUser();\r\n$user = $this->createUser();\r\n\r\n</code></pre>\r\n<p>Even without looking at the implementation, we can already guess what these methods do.</p>\r\n<p>make signifies that a new object will be created in memory. If we don't explicitly save it, it won't be persisted. create signifies that a new object will be created and persisted in the database.</p>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\n<strong>get</strong> signifies that we are going to retrieve something from the local database or disk. This probably will happen very fast.\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$invoice = $this->getInvoice();\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\n<strong>fetch</strong> signifies that a piece of data will be retrieved via the network. It could potentially be a lot slower than an equivalent <strong>get</strong> method.\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$invoice = $this->fetchInvoice();\r\n\r\n</code></pre>\r\n<p>Of course, you can decide on your own prefixes to use, but make sure you use them consistently.</p>\r\n<div class=\"subheading mb-3\">\r\nAdding metrics to name\r\n</div>\r\n<p>Whenever you work with something that can be measured, consider adding the unit to the name.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nWe don't know what that 100 represents!\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$averageTime = 100;\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nNow we now that it's 100ms \r\n</div>\r\n<pre><code class=\"language-php\">\r\n$averageTimeInMs = 100;\r\n\r\n</code></pre>\r\n<p>Another way of dealing with this is to create dedicated objects.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nImagine that you need work with a percentage. Which of these is correct?\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$percentage = 0.5;\r\n$percentage = 50;\r\n\r\n</code></pre>\r\n<p>You can't really tell what the system you're working in expects.</p>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nLet's now use an object with a static constructor, one for each possibility.\r\n</div>\r\n<pre><code class=\"language-php\">\r\nclass Percentage\r\n{    \r\n    public static fromInt(int $percentage): self\r\n    {\r\n        new self($percentage);\r\n    }\r\n\r\n    public static fromFloat(float $percentage): self\r\n    {\r\n        new self($percentage * 100);\r\n    }\r\n\r\n    private function __construct(\r\n        public int $value\r\n    ) {};\r\n}\r\n\r\n</code></pre>\r\n<p>By using a Percentage class, it's clear that an int is expected.</p>\r\n<pre><code class=\"language-php\">\r\n$percentage = Percentage::fromInt(50);\r\n\r\n</code></pre>\r\n<div class=\"subheading mb-3\">\r\nAdd prefixes to hint what is going to be returned\r\n</div>\r\n<p>By naming a method right, you can hint want is going to get returned.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nThis code doesn't hint that we are going to get back a boolean\r\n</div>\r\n<pre><code class=\"language-php\">\r\n$status = $user->status('pending');\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nLet's improve on this, by adding an <b>is</b> prefix ot the method name.\r\n</div>\r\n<pre><code class=\"language-php\">\r\n// Better because \"is\" hints that we are going to get back a boolean\r\n$isUserPending = $user->isStatus('pending');\r\n\r\n// Best (because shorter and easier to change)\r\n$isUserPending = $user->isPending();\r\n\r\n</code></pre>\r\n<p>By adding &quot;is&quot; to the names we make our intentions more clear. Also, the new variable name lets us assume it will return a boolean. Of course, you can also use a different word depending on the context, for example <strong>has</strong>.</p>\r\n<pre><code class=\"language-php\">\r\n$user->hasReplied();\r\n\r\n</code></pre>\r\n<div class=\"subheading mb-3\">\r\nName what you get\r\n</div>\r\n<p>Try to make your names unambiguous: the term &quot;class&quot;, for example, can be interpreted as a file name, a namespace name, a reflection class, and maybe even more. By using clear names, you can avoid confusion.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nWe don't know if we get a name, path, etc.\r\n</div>\r\n<pre><code class=\"language-php\">\r\nreturn $factory->getTargetClass();\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nA bit clearer!\r\n</div>\r\n<pre><code class=\"language-php\">\r\nreturn $factory->getTargetClassName();\r\nreturn $factory->getTargetClassFile();\r\nreturn $factory->getTargetClassReflection();\r\n\r\n</code></pre>\r\n<p>Don't be afraid of names that become too long. It's better to have readable code than to spare a couple of characters here and there.</p>\r\n<div class=\"subheading mb-3\">\r\nUse descriptive table names for many-to-many relationships\r\n</div>\r\n<p>When creating a table for a many-to-many relationship, like between users and videos, it is common to name the table with both the model names. This makes it obvious which tables are referred to. Still, this approach often lacks meaning and purpose.</p>\r\n<p>In this example, the table would be named &quot;user_video.&quot; We see that this table combines users and videos, but what we store is which user has watched which videos. So a much better name would be just &quot;watched_videos.&quot; This gives this table meaning and purpose.</p>\r\n<div class=\"alert alert-danger\" role=\"alert\">\r\nBad!\r\n</div>\r\n<pre><code class=\"language-php\">\r\nuser_video\r\nproduct_user\r\n\r\n</code></pre>\r\n<div class=\"alert alert-success\" role=\"alert\">\r\nGood!\r\n</div>\r\n<pre><code class=\"language-php\">\r\nwatched_videos\r\npurchased_products\r\n\r\n</code></pre>",
    "active": 1,
    "position": 7,
    "created_at": "2022-10-02 16:07:15",
    "updated_at": "2023-03-24 07:04:51"
  },
  {
    "id": 9,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Lambda Functions - Anonymous functions",
    "meta_description": "A lambda function is an anonymous PHP function that can be stored in a variable and passed as an argument to other functions or methods. A closure is a lambda function that is aware of its surrounding context.",
    "title": "Lambda Functions",
    "slug": "lambda-functions",
    "description": "A lambda function is an anonymous PHP function that can be stored in a variable and passed as an argument to other functions or methods. A closure is a lambda function that is aware of its surrounding context.",
    "content": "<div class=\"subheading mb-3\">\nWhat is a Lambda function?\n</div>\n<p>A <strong>lambda function is an anonymous PHP function</strong> that can be stored in a variable and passed as an argument to other functions or methods.\nA closure is a Lambda function that is aware of its surrounding context.</p>\n<p>I personally use Lambdas to bootstrap / configure my projects. If you're familar with frameworks such as Laravel, you'll see them all over!</p>\n<div class=\"subheading mb-3\">\nFunction accepting the Lambda as a parameter\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nNotice the <b>$fn</b> parameter below.\n</div>\n<pre><code class=\"language-php\">\nuse Closure;\n\nfunction whos_eating_what(array $names, Closure $fn): array {\n    $output = [];\n\n    foreach ($names as $name) {\n        $output[] = $name . ' is eating ' . $fn($name);\n    }\n\n    return $output;\n}\n\n</code></pre>\n<div class=\"subheading mb-3\">\nThe Lambda\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode below generates different output (of the same method) at run-time by passing in different Lambdas.\n</div>\n<pre><code class=\"language-php\">\n$names = [\n    'Stu',\n    'Cheryl',\n    'Millie',\n    'Harry',\n    'Murphy',\n    'Milo',\n];\n\n$version1 = whos_eating_what($names, function ($name) {\n\n    $mappings = [\n        'Stu' => 'Nandos',\n        'Cheryl' => 'Beans on toast',\n        'Millie' => 'KFC',\n        'Harry' => 'Burger King',\n    ];\n\n    if (! empty($mappings[$name])) {\n        return $mappings[$name];\n    }\n\n    return 'Anything!';\n});\n\n$version2 = whos_eating_what($names, function ($name) {\n\n    $mappings = [\n        'Stu' => 'Salad',\n        'Cheryl' => 'Beans on toast',\n        'Millie' => 'KFC',\n        'Harry' => 'Burger King',\n    ];\n\n    if (! empty($mappings[$name])) {\n        return $mappings[$name];\n    }\n\n    return 'Dog food';\n});\n\ndd($version1, $version2);\n\n</code></pre>\n<div class=\"subheading mb-3\">\nOutput\n</div>\n<img src=\"/images/lambda.png\" title=\"Lambas\"/>\n<div class=\"alert alert-info\" role=\"alert\">\nP.S - No way I'm eating salad (but I probably should)...\n</div>",
    "active": 1,
    "position": 8,
    "created_at": "2022-10-02 16:46:22",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 10,
    "user_id": 1,
    "category_id": 2,
    "meta_title": "Laravel - Eloquent Performance",
    "meta_description": "Some hints and tips to help improve performance of your Laravel application",
    "title": "Eloquent Performance",
    "slug": "eloquent-performance",
    "description": "Some hints and tips to help improve performance of your Laravel application",
    "content": "<div class=\"subheading mb-3\">\nInstall Laravel Debug Bar\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nA profiling tool designed specifically for Laravel which gives you insights into your application metrics.\n</div>\n<p>To require this package via composer as a dev dependency because we only need this locally and we <strong>NEVER</strong> want this running in production:</p>\n<pre><code class=\"language-php\">\ncomposer require barryvdh/laravel-debugbar --dev\n\n</code></pre>\n<p>Laravel uses Package Auto-Discovery, so doesn't require you to manually add the ServiceProvider.</p>\n<p>The Debug bar will be enabled when <strong>APP_DEBUG</strong> is true. In your .env file. When enabled you’ll see the following in your browser:</p>\n<img src=\"/images/performance1.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p><b>The performance metrics</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOkay so we’re got the debug bar, but what do we need to be looking this? This section tells you where to find the important metric data.\n</div>\n<p><b>Page Load</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nIt’s good to keep a close eye on this. It depends on the type of site, i.e best practice for an eCommerce site is 2 to 3 seconds max otherwise it starts impacting sales. Basically the quicker the page loads, the better!\n</div>\n<img src=\"/images/performance2.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p><b>Queries</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nHow many queries are being run?\n</div>\n<p>The Queries tab is a great way to identify N+1 issues as it shows the total number of queries (N+1 issues are not scalable, the more data you have, the more its going to impact performance, you’re executing an extra query per row of data).</p>\n<p>It might identify areas of your code where you could utilise eager loading.</p>\n<div class=\"alert alert-info\" role=\"alert\">\nHow fast are the queries are the individual queries?\n</div>\n<p>In the screenshot below, we’re selecting users, which takes <strong>1.61ms</strong>. But what if we needed to order them by their name?</p>\n<img src=\"/images/performance3.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>Notice how much longer it takes? It’s jumped from <strong>1.61ms</strong> to <strong>28.11ms</strong>.</p>\n<img src=\"/images/performance4.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>This might be an indication that a database index is required on the ‘<strong>name</strong>’ column. After adding the index we get a query time of <strong>2.4ms</strong> - much faster than <strong>28.11ms</strong>!</p>\n<img src=\"/images/performance5.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p><b>Memory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe amount of memory being used greatly impacts the performance of your application.\n</div>\n<p>The models tab comes in handy here! It shows how many models have been loaded! In the example below, you can see we have 16 company and 16 user models loaded.</p>\n<img src=\"/images/performance6.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>But what happens if we eager load users from within the company model?</p>\n<img src=\"/images/performance7.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>You may notice a memory increase (in this example it increases by 2MB), and we’re loading a lot more user models! This change has had quite a negative impact on the application.</p>\n<div class=\"subheading mb-3\">\nThe Performance\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nA list of tips which help improve the performance of your application.\n</div>\n<div class=\"subheading mb-3\">\nOnly Select What You Need\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nOnly selecting what you need will help lower your memory usage.\n</div>\n<p>Take this example, the memory usage is at <strong>19.8MB</strong>:</p>\n<img src=\"/images/performance8.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>This is because we’re pulling all the content from the posts table, which includes the post content (which is quite large), since this page doesn’t need to know the post content for all posts (its listing posts with a link to the individual post page), why pull all the data?</p>\n<p>If we update the query to pull the columns we need, this happens:</p>\n<pre><code class=\"language-php\">\n->select('id', 'title', 'slug', 'author_id')\n\n</code></pre>\n<img src=\"/images/performance9.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>We’re down to 4.35MB of memory usage and we’ve shaved the page load slightly too. You could also apply to this any eager loaded models too. In this example we only need the author id and name, I.e:</p>\n<p>Changing:</p>\n<pre><code class=\"language-php\">\n->with('author')\n\n</code></pre>\n<p>To:</p>\n<pre><code class=\"language-php\">\n->with('author:id,name')\n\n</code></pre>\n<p>Will improve memory usage too.</p>\n<div class=\"subheading mb-3\">\nN+1 Issues\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nAn example of a hasMany relationship could be a user log. What if we needed to show to last time I user logged in within a list of users?\n</div>\n<p>Assuming you have a <strong>logins</strong> relationship within your user model, you could add this into your view (in a last login column), it might look something like this:</p>\n<pre><code class=\"language-php\">\n{{ $user->logins()->latest()->first()->created_at->diffForHumans() }}\n\n</code></pre>\n<p>In the browser, you’d get the following:</p>\n<img src=\"/images/performance10.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>However, in the debug bar, there’s a problem - for every user we display we’re executing an additional query to get their last login (N+1 issue). What if the page displayed 50 users, or 1,000 users?</p>\n<img src=\"/images/performance11.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>If we eager load ‘<strong>logins</strong>’.</p>\n<pre><code class=\"language-php\">\n->with('logins')\n\n</code></pre>\n<p>And adjust the view</p>\n<pre><code class=\"language-php\">\n{{ $user->logins->sortByDesc('created_at')->first()->diffForHumans() }}\n\n</code></pre>\n<p>This reduces the total amount of queries (from 17 to 3):</p>\n<img src=\"/images/performance12.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>However, we’ve introduced another problem - see the number of models above? It’s into the thousands now and the memory usage is going to increase! Eager loading <strong>ALL</strong> this data is not a better solution.</p>\n<img src=\"/images/performance13.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<p>Before we fallback to caching (Don’t be that guy, or at least use it as a last resort!?), potentially (in this scenario) a sub query could be useful. Using <strong>addSelect</strong> might be the answer.</p>\n<div class=\"alert alert-info\" role=\"alert\">\nLet's cast it to a datetime too, Eloquent handled this for us previously.\n</div>\n<pre><code class=\"language-php\">\n->addSelect(['last_login_at' => Login::select('created_at')\n    ->whereColumn('user_id', 'users.id')\n    ->latest()\n    ->take(1);\n])\n->withCasts(['last_login_at', 'datetime'])\n\n</code></pre>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis is a little beefy - I suggest moving this into a scope, maybe calling it something like <strong>scopeWithLastLoginAt</strong>.\n<br/><br/>\nIt makes logic more expressive throughout your application and it's available for reuse.\n</div>\n<p>And you’d change the view to:</p>\n<pre><code class=\"language-php\">\n{{ $user->last_login_at->diffForHumans() }}\n\n</code></pre>\n<p>This was the situation before:</p>\n<img src=\"/images/performance14.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p>Now it looks like this:</p>\n<img src=\"/images/performance15.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nDynamic Relationships\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nWhat would you do if you needed another column (maybe the IP address from the user logs) from the sub query?  What if you needed another column in future? \n<br/><br/>\nYou could copy and paste what we’ve already done and rename a few bits, but is there a better way? This approach isn’t really scalable. We could end up with loads of query scopes!\n</div>\n<p>Create a relationship and a scope.</p>\n<div class=\"alert alert-info\" role=\"alert\">\nBy creating a ‘<strong>last_login_id</strong>’ dynamically via a sub query, the <strong>lastLogin</strong> relationship now works!\n</div>\n<pre><code class=\"language-php\">\npublic function lastLogin()\n{\n    return $this->belongsTo(Login::class);\n}\n\npublic function scopeWithLastLogin($query) \n{\n    $query->addSelect(['last_login_id' => Login::select('id')\n        ->whereColumn('user_id', 'users.id')\n        ->latest()\n        ->take(1);\n    ])->lastLogin();\n}\n\n</code></pre>\n<p>You’d simply query the model via:</p>\n<pre><code class=\"language-php\">\n->withLastLogin()\n\n</code></pre>\n<p>And the view would be updated to the following:</p>\n<pre><code class=\"language-php\">\n{{ $user->lastLogin->ip_address; }}\n{{ $user->lastLogin->created_at->diffForHumans(); }}\n\n</code></pre>\n<p>You can’t lazy load dynamic relationships as no ‘<strong>last_login_id</strong>’ will be present on the model, as this depends upon the <strong>WithLastLogin</strong> scope.</p>\n<p>And finally... you might think that using the relationship below, would surely work?</p>\n<pre><code class=\"language-php\">\npublic function lastLogin()\n{\n    return $this->hasOne(Login::class)->latest();\n}\n\n</code></pre>\n<p>Unfortunately not, it reintroduces the N+1 problem...</p>\n<img src=\"/images/performance16.png\" title=\"Laravel Performance\" style=\"width:100%\"/>\n<p><br/></p>",
    "active": 1,
    "position": 0,
    "created_at": "2022-10-02 16:46:23",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 11,
    "user_id": 1,
    "category_id": 2,
    "meta_title": "Laravel - Calculate totals using conditional aggregates",
    "meta_description": "How to correctly calculate totals in Eloquent using conditional aggregates",
    "title": "Eloquent - Calculating totals using conditional aggregates",
    "slug": "calculating-totals",
    "description": "How to correctly calculate totals in Eloquent using conditional aggregates",
    "content": "<div class=\"subheading mb-3\">\nThe requirement\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nImagine you've got a page which shows a list of features, there's a new requirement where we need to display several totals based on the current status of the feature.\n</div>\n<p>Something which looks like this:\n<br/></p>\n<img src=\"/images/feature-list.png\" title=\"Feature List\" style=\"width:100%\"/>\n<p><br/>\nIf we add the totals, the appearance would change to something like this:\n<br/></p>\n<img src=\"/images/feature-list-with-totals.png\" title=\"Feature List\" style=\"width:100%\"/>\n<p><br/>\nBut what's the most efficient way of calculating the totals?</p>\n<div class=\"subheading mb-3\">\nOption 1 - Running separate queries\n</div>\n<pre><code class=\"language-php\">\n$statuses->requested = Feature::where('status', 'requested')->count();\n$statuses->planned = Feature::where('status', 'planned')->count();\n$statuses->completed = Feature::where('status', 'completed')->count();\n</code>\n</pre>\n<p><br/>\nThis approach is simple enough and for this example, it's not a big deal as we've only got 3 statuses, but what if we had 5, or 10, or 20?\nThat's when this approach starts to become a problem!</p>\n<img src=\"/images/option-1.png\" title=\"Option 1\" style=\"width:100%\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nOption 2 - A single database query\n</div>\n<p>It is possible to fetch everything you need in one database query by writing count aggregate queries.\nThe query would look like this:</p>\n<pre><code class=\"language-php\">\nSELECT \ncount(CASE WHEN status = 'requested' THEN 1 END) AS requested,\ncount(CASE WHEN status = 'planned' THEN 1 END) AS planned,\ncount(CASE WHEN status = 'completed' THEN 1 END) AS completed\nfrom features;\n</code>\n</pre>\n<p>So how do we do this with Eloquent?</p>\n<pre><code class=\"language-php\">\n$statuses = Feature::toBase()\n    ->selectRaw(\"count(CASE WHEN status = 'requested' THEN 1 END) AS requested\")\n    ->selectRaw(\"count(CASE WHEN status = 'planned' THEN 1 END) AS planned\")\n    ->selectRaw(\"count(CASE WHEN status = 'completed' THEN 1 END) AS completed\")\n    ->first();\n</code>\n</pre>\n<p>We've now executed one query (so we've got a scalable solution / no N+1 problem), not three and this query is even quicker than the first one ran above.</p>\n<img src=\"/images/option-2.png\" title=\"Option 2\" style=\"width:100%\"/>",
    "active": 1,
    "position": 1,
    "created_at": "2022-10-02 16:46:23",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 13,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Chain Of Responsibility Pattern",
    "meta_description": "To build a chain of objects to handle a call in sequential order. If one object cannot handle a call, it delegates the call to the next in the chain and so forth.",
    "title": "Chain Of Responsibility Pattern",
    "slug": "chain-of-responsibility-pattern",
    "description": "To build a chain of objects to handle a call in sequential order. If one object cannot handle a call, it delegates the call to the next in the chain and so forth.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To build a chain of objects to handle a call in sequential order. If one object cannot handle a call, it delegates the call to the next in the chain and so forth.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>Logging framework, where each chain element decides autonomously what to do with a log message</li>\n<li>A Spam filter</li>\n<li>Caching: first object is an instance of e.g. a Memcached Interface, if that &quot;misses&quot; it delegates the call to the database interface</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/chain-of-responsibility-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Handler</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nHandler interface defines the method signatures for this design pattern.\n</div>\n<pre><code class=\"language-php\">\n/**\n* The Handler interface declares a method for building the chain of handlers.\n* It also declares a method for executing a request.\n*/\ninterface Handler\n{\n    public function setNext(Handler $handler): Handler;\n    public function handle(string $request): ?string;\n}\n\n</code></pre>\n<p><b>Abstract Handler</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAbstractHandler handles boilerplate (possible code duplication throughout the concrete subclasses) - using an abstract class is also known as the template method pattern.\n<br/><br/>\nsetNext accepts an instance of Hander, updates a class property called nextHandler. If the nextHandler class property isn’t empty, then we move down the chain to the next instance of Handler.\n</div>\n<pre><code class=\"language-php\">\n/**\n* The default chaining behavior can be implemented inside a base handler class.\n*/\nabstract class AbstractHandler implements Handler\n{\n   /**\n    * @var Handler\n    */\n    private $nextHandler;\n\n    public function setNext(Handler $handler): Handler\n    {\n        $this->nextHandler = $handler;\n        // Returning a handler from here will let us link handlers in a\n        // convenient way like this:\n        // $stu->setNext($cheryl)->setNext($millie)->setNext($harry);\n        return $handler;\n    }\n\n    public function handle(string $request): ?string \n    {\n      if ($this->nextHandler) {\n          return $this->nextHandler->handle($request);\n      }\n\n        return null;\n    }\n}\n\n</code></pre>\n<p><b>Concrete Sub Classes</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nExample below defines a set of concrete sub classes which all extend AbstractHandler. You’ll notice that each handle method contains slightly different behaviour, i.e StuHandler wants a Mixed Grill, otherwise we’d be moving onto the next concrete sub class (if the chain has been set up - see Examples). HarryHandler wants a McDonalds.\n</div>\n<pre><code class=\"language-php\">\n/**\n* The client code is usually suited to work with a single handler. In most\n* cases, it is not even aware that the handler is part of a chain.\n*/\nfunction clientCode(Handler $handler)\n{\n    foreach ([\"Nandos\", \"Mixed Grill\", \"Cup of coffee\", \"Burger King\", \"McDonalds\", \"Prawns\"] as $food) {\n        echo \"Client: Who wants a \" . $food . \"?\\n\";\n        $result = $handler->handle($food);\n        if ($result) {\n             echo \"  \" . $result;\n        } else {\n             echo \"  \" . $food . \" was left alone.\\n\";\n        }\n    }\n}\n\n/**\n* Build the chain first\n*/\n$stu = new StuHandler();\n$cheryl = new CherylHandler();\n$millie = new MillieHandler();\n$harry = new HarryHandler();\n$stu->setNext($cheryl)->setNext($millie)->setNext($harry);\n\n/**\n* The client should be able to send a request to any handler, not just the\n* first one in the chain.\n*/\necho \"Chain: Stu > Cheryl > Millie > Harry\\n\\n\";\nclientCode($stu);\necho \"\\n\";\n\necho \"Subchain: Millie > Harry\\n\\n\";\nclientCode($millie);\n\n</code></pre>\n<p><b>Test output</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nYou’ll notice the output differs depending on how the chain has been set up at runtime. This flexibility allows the adjustment of behaviour at run time. Additionally, this design pattern provides you with mechanism to extend code, rather than leaving code open for modification (which leads to code rot).\n</div>\n<pre><code class=\"language-php\">\nChain: Stu > Cheryl > Millie > Harry\n\nClient: Who wants a Nandos?\nMillie: I'll eat the Nandos.\nClient: Who wants a Mixed Grill?\nStu: I'll eat the Mixed Grill.\nClient: Who wants a Cup of coffee?\nCup of coffee was left alone.\nClient: Who wants a Burger King?\nBurger King was left alone.\nClient: Who wants a McDonalds?\nHarry: I'll eat the McDonalds.\nClient: Who wants a Prawns?\nCheryl: I'll eat the Prawns.\n\nSubchain: Millie > Harry\n\nClient: Who wants a Nandos?\nMillie: I'll eat the Nandos.\nClient: Who wants a Mixed Grill?\nMixed Grill was left alone.\nClient: Who wants a Cup of coffee?\nCup of coffee was left alone.\nClient: Who wants a Burger King?\nBurger King was left alone.\nClient: Who wants a McDonalds?\nHarry: I'll eat the McDonalds.\nClient: Who wants a Prawns?\nPrawns was left alone.\n\n</code></pre>",
    "active": 1,
    "position": 0,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 14,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Command Pattern",
    "meta_description": "To encapsulate invocation and decoupling.",
    "title": "Command Pattern",
    "slug": "command-pattern",
    "description": "To encapsulate invocation and decoupling.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To encapsulate invocation and decoupling.</p>\n<p>We have an Invoker and a Receiver. This pattern uses a &quot;Command&quot; to delegate the method call against the Receiver and presents the same method &quot;execute&quot;. Therefore, the Invoker just knows to call &quot;execute&quot; to process the Command of the client. The Receiver is decoupled from the Invoker.</p>\n<p>The second aspect of this pattern is the undo(), which undoes the method execute(). Command can also be aggregated to combine more complex commands with minimum copy-paste and relying on composition over inheritance.</p>\n<div class=\"alert alert-info\" role=\"alert\">\nEssentially, an invoker is given a command to run. A command delegates method calls to a receiver. As the receiver is decoupled it can be switched out easily in future without making any changes to the command class.\n</div>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>A text editor : all events are commands which can be undone, stacked and saved.</li>\n<li>Big CLI tools use subcommands to distribute various tasks and pack them in &quot;modules&quot;, each of these can be implemented with the Command pattern (e.g. vagrant)</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/command-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Command</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nCommand Interface which concrete commands implement. Enforcing the execute method to be present.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\ninterface Command\n{\n    /**\n    * this is the most important method in the Command pattern,\n    * The Receiver goes in the constructor.\n    */\n    public function execute();\n}\n\n</code></pre>\n<p><b>UndoableCommand</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUndoableCommand Interface which concrete commands implement. Enforcing the undo and execute methods (as the interface extends another interface) to be present.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\ninterface UndoableCommand extends Command\n{\n    /**\n    * This method is used to undo change made by command execution\n    */\n    public function undo();\n}\n\n</code></pre>\n<p><b>AddMessageDateCommand</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAddMessageDateCommand implements UndoableCommand (meaning it must contain undo and execute methods). The construct accepts a class which implements the Receiver class. – come back to this.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\n/**\n* This concrete command tweaks receiver to add current date to messages\n* invoker just knows that it can call \"execute\"\n*/\nclass AddMessageDateCommand implements UndoableCommand\n{\n   /**\n    * Each concrete command is built with different receivers.\n    * There can be one, many or completely no receivers, but there can be other commands in the parameters.\n    */\n    public function __construct(private Receiver $output)\n    {\n    }\n\n   /**\n    * Execute and make receiver to enable displaying messages date.\n    */\n    public function execute()\n    {\n        // sometimes, there is no receiver and this is the command which\n        // does all the work\n        $this->output->enableDate();\n    }\n\n   /**\n    * Undo the command and make receiver to disable displaying messages date.\n    */\n    public function undo()\n    {\n        // sometimes, there is no receiver and this is the command which\n        // does all the work\n        $this->output->disableDate();\n    }\n}\n</code></pre>\n<p><b>HelloCommand</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nHelloCommand implements Command (meaning it must contain the execute method). The construct accepts the Receiver class. The command then calls methods from the Receiver class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\n/**\n* This concrete command calls \"print\" on the Receiver, but an external\n* invoker just knows that it can call \"execute\"\n*/\nclass HelloCommand implements Command\n{\n   /**\n    * Each concrete command is built with different receivers.\n    * There can be one, many or completely no receivers, but there can be other commands in the parameters\n    */\n    public function __construct(private Receiver $output)\n    {\n    }\n\n   /**\n    * execute and output \"Hello World\".\n    */\n    public function execute()\n    {\n        // sometimes, there is no receiver and this is the command which does all the work\n        $this->output->write('Hello World');\n    }\n}\n</code></pre>\n<p><b>Invoker</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Invoker class sets (via setCommand) and runs a given command (via run).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\n/**\n* Invoker is using the command given to it.\n* Example : an Application in SF2.\n*/\nclass Invoker\n{\n    private Command $command;\n\n   /**\n    * in the invoker we find this kind of method for subscribing the command\n    * There can be also a stack, a list, a fixed set ...\n    */\n    public function setCommand(Command $cmd)\n    {\n        $this->command = $cmd;\n    }\n\n   /**\n    * executes the command; the invoker is the same whatever is the command\n    */\n    public function run()\n    {\n        $this->command->execute(); \n    }\n}\n</code></pre>\n<p><b>Receiver</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nReceiver is a specific service with its own contract (no need for an interface) and can only be concrete.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command;\n\n/**\n* Receiver is a specific service with its own contract and can be only concrete.\n*/\nclass Receiver\n{\n    private bool $enableDate = false;\n\n   /**\n    * @var string[]\n    */\n    private array $output = [];\n\n    public function write(string $str)\n    {\n        if ($this->enableDate) {\n            $str .= ' [' . date('Y-m-d') . ']';\n        }\n\n        $this->output[] = $str;\n    }\n\n    public function getOutput(): string\n    {\n        return join(\"\\n\", $this->output);\n    }\n\n   /**\n    * Enable receiver to display message date\n    */\n    public function enableDate()\n    {\n        $this->enableDate = true;\n    }\n\n   /**\n    * Disable receiver to display message date\n    */\n    public function disableDate()\n    {\n        $this->enableDate = false;\n    }\n}\n\n</code></pre>\n<p><b>CommandTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Invoker invokes a Command. The command delegates method calls to its Receiver.\n</div>\n<pre><code class=\"language-php\">\nclass CommandTest extends TestCase\n{\n    public function testInvocation()\n    {\n        $invoker = new Invoker();\n        $receiver = new Receiver();\n\n        $invoker->setCommand(new HelloCommand($receiver));\n        $invoker->run();\n        $this->assertSame('Hello World', $receiver->getOutput());\n    }\n}\n\n</code></pre>\n<p><b>UndoableCommandTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Invoker invokes a Command. The command delegates method calls to its Receiver.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Command\\Tests;\n\nuse DesignPatterns\\Behavioral\\Command\\AddMessageDateCommand;\nuse DesignPatterns\\Behavioral\\Command\\HelloCommand;\nuse DesignPatterns\\Behavioral\\Command\\Invoker;\nuse DesignPatterns\\Behavioral\\Command\\Receiver;\nuse PHPUnit\\Framework\\TestCase;\n\nclass UndoableCommandTest extends TestCase\n{\n    public function testInvocation()\n    {\n        $invoker = new Invoker();\n        $receiver = new Receiver();\n\n        $invoker->setCommand(new HelloCommand($receiver));\n        $invoker->run();\n        $this->assertSame('Hello World', $receiver->getOutput());\n\n        $messageDateCommand = new AddMessageDateCommand($receiver);\n        $messageDateCommand->execute();\n\n        $invoker->run();\n        $this->assertSame(\"Hello World\\nHello World [\" . date('Y-m-d') . ']', $receiver->getOutput());\n\n        $messageDateCommand->undo();\n\n        $invoker->run();\n        $this->assertSame(\"Hello World\\nHello World [\" . date('Y-m-d') . \"]\\nHello World\", $receiver->getOutput());\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 1,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 15,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Interpreter Pattern",
    "meta_description": "For a given language, it defines the representation of its grammar as \"No Terminal Expression\" and \"Terminal Expression\", as well as an interpreter for the sentences of that language.",
    "title": "Interpreter Pattern",
    "slug": "interpreter-pattern",
    "description": "For a given language, it defines the representation of its grammar as \"No Terminal Expression\" and \"Terminal Expression\", as well as an interpreter for the sentences of that language.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>For a given language, it defines the representation of its grammar as &quot;No Terminal Expression&quot; and &quot;Terminal Expression&quot;, as well as an interpreter for the sentences of that language.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<p>An example of a binary logic interpreter, each definition is defined by its own class</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/interpreter-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>AbstractExp</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAbstractExp defines the interpret method signature. Any class extending AbstractExp must provide a method body for interpret.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter;\n\nabstract class AbstractExp\n{\n    abstract public function interpret(Context $context): bool;\n}\n\n</code></pre>\n<p><b>AndExp</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAndExp extends AbstractExp and accepts two instances of AbstractExp via the construct. The interpret method is made concrete and accepts a Context class as a method parameter.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter;\n\n/**\n* This NoTerminalExpression\n*/\nclass AndExp extends AbstractExp\n{\n    public function __construct(private AbstractExp $first, private AbstractExp $second)\n    {\n    }\n\n    public function interpret(Context $context): bool\n    {\n        return $this->first->interpret($context) && $this->second->interpret($context);\n    }\n}\n\n</code></pre>\n<p><b>OrExp</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOrExp extends AbstractExp and accepts two instances of AbstractExp via the construct. The interpret method is made concrete and accepts a Context class as a method parameter.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter;\n\n/**\n* This NoTerminalExpression\n*/\nclass OrExp extends AbstractExp\n{\n    public function __construct(private AbstractExp $first, private AbstractExp $second)\n    {\n    }\n\n    public function interpret(Context $context): bool\n    {\n        return $this->first->interpret($context) || $this->second->interpret($context);\n    }\n}\n\n</code></pre>\n<p><b>VariableExp</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nVariableExp extends AbstractExp and accepts a string via the construct. The interpret method is made concrete and accepts a Context class as a method parameter.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter;\n\n/**\n* This TerminalExpression\n*/\nclass VariableExp extends AbstractExp\n{\n    public function __construct(private string $name)\n    {\n    }\n\n    public function interpret(Context $context): bool\n    {\n       return $context->lookUp($this->name);\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n\n</code></pre>\n<p><b>Context</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Context class has two methods; lookUp and assign that all concrete ‘exp’ classes have access to.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter;\n\nuse Exception;\n\nclass Context\n{\n    private array $poolVariable;\n\n    public function lookUp(string $name): bool\n    {\n        if (!key_exists($name, $this->poolVariable)) {\n            throw new Exception(\"no exist variable: $name\");\n        }\n\n        return $this->poolVariable[$name];\n    }\n\n    public function assign(VariableExp $variable, bool $val)\n    {\n        $this->poolVariable[$variable->getName()] = $val;\n    }\n}\n\n</code></pre>\n<p><b>IntepreterTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnit test showing an example of the Interpreter pattern.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Interpreter\\Tests;\n\nuse DesignPatterns\\Behavioral\\Interpreter\\AndExp;\nuse DesignPatterns\\Behavioral\\Interpreter\\Context;\nuse DesignPatterns\\Behavioral\\Interpreter\\OrExp;\nuse DesignPatterns\\Behavioral\\Interpreter\\VariableExp;\nuse PHPUnit\\Framework\\TestCase;\n\nclass InterpreterTest extends TestCase\n{\n    private Context $context;\n    private VariableExp $a;\n    private VariableExp $b;\n    private VariableExp $c;\n\n    public function setUp(): void\n    {\n        $this->context = new Context();\n        $this->a = new VariableExp('A');\n        $this->b = new VariableExp('B');\n        $this->c = new VariableExp('C');\n    }\n\n    public function testOr()\n    {\n        $this->context->assign($this->a, false);\n        $this->context->assign($this->b, false);\n        $this->context->assign($this->c, true);\n\n        // A ∨ B\n        $exp1 = new OrExp($this->a, $this->b);\n        $result1 = $exp1->interpret($this->context);\n\n        $this->assertFalse($result1, 'A ∨ B must false');\n\n        // $exp1 ∨ C\n        $exp2 = new OrExp($exp1, $this->c);\n        $result2 = $exp2->interpret($this->context);\n\n        $this->assertTrue($result2, '(A ∨ B) ∨ C must true');\n    }\n\n    public function testAnd()\n    {\n        $this->context->assign($this->a, true);\n        $this->context->assign($this->b, true);\n        $this->context->assign($this->c, false);\n\n        // A ∧ B\n        $exp1 = new AndExp($this->a, $this->b);\n        $result1 = $exp1->interpret($this->context);\n\n        $this->assertTrue($result1, 'A ∧ B must true');\n\n        // $exp1 ∧ C\n        $exp2 = new AndExp($exp1, $this->c);\n        $result2 = $exp2->interpret($this->context);\n\n        $this->assertFalse($result2, '(A ∧ B) ∧ C must false');\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 2,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 16,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Iterator Pattern",
    "meta_description": "To make an object iterable and to make it appear like a collection of objects.",
    "title": "Iterator Pattern",
    "slug": "iterator-pattern",
    "description": "To make an object iterable and to make it appear like a collection of objects.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To make an object iterable and to make it appear like a collection of objects.</p>\n<p>Note - Standard PHP Library (SPL) defines an interface Iterator which is best suited for this! Often you would want to implement the Countable interface too, to allow count($object) on your iterable object</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/iterator-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Book</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBook is a simple class with a construct which accepts some strings and getter methods which return them.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Iterator;\n\nclass Book\n{\n    public function __construct(private string $title, private string $author)\n    {\n    }\n\n    public function getAuthor(): string\n    {\n        return $this->author;\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    public function getAuthorAndTitle(): string\n    {\n        return $this->getTitle() . ' by ' . $this->getAuthor();\n    }\n}\n\n</code></pre>\n<p><b>BookList</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBookList contains an array of Book objects. Books can be added (addBook) and removed (removeBook). BookList implements Countable and Iterator interfaces ensuring it contains various methods such as count, current, key etc.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Iterator;\n\nuse Countable;\nuse Iterator;\n\nclass BookList implements Countable, Iterator\n{\n    /**\n    * @var Book[]\n    */\n    private array $books = [];\n    private int $currentIndex = 0;\n\n    public function addBook(Book $book)\n    {\n        $this->books[] = $book;\n    }\n\n    public function removeBook(Book $bookToRemove)\n    {\n        foreach ($this->books as $key => $book) {\n            if ($book->getAuthorAndTitle() === $bookToRemove->getAuthorAndTitle()) {\n                unset($this->books[$key]);\n            }\n        }\n\n        $this->books = array_values($this->books);\n    }\n\n    public function count(): int\n    {\n        return count($this->books);\n    }\n\n    public function current(): Book\n    {\n        return $this->books[$this->currentIndex];\n    }\n\n    public function key(): int\n    {\n        return $this->currentIndex;\n    }\n\n    public function next()\n    {\n        $this->currentIndex++;\n    }\n\n    public function rewind()\n    {\n        $this->currentIndex = 0;\n    }\n\n    public function valid(): bool\n    {\n        return isset($this->books[$this->currentIndex]);\n    }\n}\n\n</code></pre>\n<p><b>IteratorTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnit test showing the design pattern in action.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Iterator\\Tests;\n\nuse DesignPatterns\\Behavioral\\Iterator\\Book;\nuse DesignPatterns\\Behavioral\\Iterator\\BookList;\nuse PHPUnit\\Framework\\TestCase;\n\nclass IteratorTest extends TestCase\n{\n    public function testCanIterateOverBookList()\n    {\n        $bookList = new BookList();\n        $bookList->addBook(new Book('Learning PHP Design Patterns', 'William Sanders'));\n        $bookList->addBook(new Book('Professional Php Design Patterns', 'Aaron Saray'));\n        $bookList->addBook(new Book('Clean Code', 'Robert C. Martin'));\n\n        $books = [];\n\n        foreach ($bookList as $book) {\n            $books[] = $book->getAuthorAndTitle();\n        }\n\n        $this->assertSame(\n            [\n                'Learning PHP Design Patterns by William Sanders',\n                'Professional Php Design Patterns by Aaron Saray',\n                'Clean Code by Robert C. Martin',\n            ],\n            $books\n        );\n    }\n\n    public function testCanIterateOverBookListAfterRemovingBook()\n    {\n        $book = new Book('Clean Code', 'Robert C. Martin');\n        $book2 = new Book('Professional Php Design Patterns', 'Aaron Saray');\n\n        $bookList = new BookList();\n        $bookList->addBook($book);\n        $bookList->addBook($book2);\n        $bookList->removeBook($book);\n\n        $books = [];\n        foreach ($bookList as $book) {\n            $books[] = $book->getAuthorAndTitle();\n        }\n\n        $this->assertSame(\n            ['Professional Php Design Patterns by Aaron Saray'],\n            $books\n        );\n    }\n\n    public function testCanAddBookToList()\n    {\n        $book = new Book('Clean Code', 'Robert C. Martin');\n\n        $bookList = new BookList();\n        $bookList->addBook($book);\n\n        $this->assertCount(1, $bookList);\n    }\n\n    public function testCanRemoveBookFromList()\n    {\n        $book = new Book('Clean Code', 'Robert C. Martin');\n\n        $bookList = new BookList();\n        $bookList->addBook($book);\n        $bookList->removeBook($book);\n\n        $this->assertCount(0, $bookList);\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 3,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 17,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Mediator Pattern",
    "meta_description": "This pattern provides an easy way to decouple many components working together. It is a good alternative to Observer IF you have a \"central intelligence\", like a controller (but not in the sense of the MVC).",
    "title": "Mediator Pattern",
    "slug": "mediator-pattern",
    "description": "This pattern provides an easy way to decouple many components working together. It is a good alternative to Observer IF you have a \"central intelligence\", like a controller (but not in the sense of the MVC).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>This pattern provides an easy way to decouple many components working together. It is a good alternative to Observer IF you have a &quot;central intelligence&quot;, like a controller (but not in the sense of the MVC).</p>\n<p>All components (called Colleague) are only coupled to the Mediator interface and it is a good thing because in OOP, one good friend is better than many. This is the key-feature of this pattern.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/mediator-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Mediator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nMediator Interface which defines a getUser method signature.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Mediator;\n\ninterface Mediator\n{\n    public function getUser(string $username): string;\n}\n\n</code></pre>\n<p><b>Colleague</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAbstract class Colleague which eliminates boilerplate code throughout any concrete subclasses which extend it. The setMediator method is final meaning it cannot be overridden by a sub class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Mediator;\n\nabstract class Colleague\n{\n    protected Mediator $mediator;\n\n    final public function setMediator(Mediator $mediator)\n    {\n        $this->mediator = $mediator;\n    }\n}\n\n</code></pre>\n<p><b>Ui</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUi extends Colleague and contains an outputUserInfo method. This method references the mediators getUser method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Mediator;\n\nclass Ui extends Colleague\n{\n    public function outputUserInfo(string $username)\n    {\n        echo $this->mediator->getUser($username);\n    }\n}\n\n</code></pre>\n<p><b>UserRepository</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUserRepository extends Colleague and has a getUserName method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Mediator;\n\nclass UserRepository extends Colleague\n{\n    public function getUserName(string $user): string\n    {\n        return 'User: ' . $user;\n    }\n}\n\n</code></pre>\n<p><b>UserRepositoryUiMediator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe UserRepositoryUiMediator expects the UserRepository and Ui classes as construct parameters. This class proxies methods within those classes.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Mediator;\n\nclass UserRepositoryUiMediator implements Mediator\n{\n    public function __construct(private UserRepository $userRepository, private Ui $ui)\n    {\n        $this->userRepository->setMediator($this);\n        $this->ui->setMediator($this);\n    }\n\n    public function printInfoAbout(string $user)\n    {\n        $this->ui->outputUserInfo($user);\n    }\n\n    public function getUser(string $username): string\n    {\n        return $this->userRepository->getUserName($username);\n    }\n}\n\n</code></pre>\n<p><b>MediatorTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nMediatorTest example below.  The mediator design pattern decouples components which all work together. A separation of concerns allows code to be reused and switched out easily.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Tests\\Mediator\\Tests;\n\nuse DesignPatterns\\Behavioral\\Mediator\\Ui;\nuse DesignPatterns\\Behavioral\\Mediator\\UserRepository;\nuse DesignPatterns\\Behavioral\\Mediator\\UserRepositoryUiMediator;\nuse PHPUnit\\Framework\\TestCase;\n\nclass MediatorTest extends TestCase\n{\n    public function testOutputHelloWorld()\n    {\n        $mediator = new UserRepositoryUiMediator(new UserRepository(), new Ui());\n\n        $this->expectOutputString('User: Dominik');\n        $mediator->printInfoAbout('Dominik');\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 4,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 18,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns -  Memento Pattern",
    "meta_description": "It provides the ability to restore an object to it's previous state (undo via rollback) or to gain access to state of the object, without revealing it's implementation (i.e., the object is not required to have a function to return the current state).",
    "title": "Memento Pattern",
    "slug": "memento-pattern",
    "description": "It provides the ability to restore an object to it's previous state (undo via rollback) or to gain access to state of the object, without revealing it's implementation (i.e., the object is not required to have a function to return the current state).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>It provides the ability to restore an object to it's previous state (undo via rollback) or to gain access to state of the object, without revealing it's implementation (i.e., the object is not required to have a function to return the current state).</p>\n<p>The memento pattern is implemented with three objects: the Originator, a Caretaker and a Memento.</p>\n<p><strong>Memento</strong> – an object that contains a concrete unique snapshot of state of any object or resource: string, number, array, an instance of class and so on. The uniqueness in this case does not imply the prohibition existence of similar states in different snapshots. That means the state can be extracted as the independent clone. Any object stored in the Memento should be a full copy of the original object rather than a reference to the original object. The Memento object is a &quot;opaque object&quot; (the object that no one can or should change).</p>\n<p><strong>Originator</strong> – it is an object that contains the actual state of an external object is strictly specified type. Originator is able to create a unique copy of this state and return it wrapped in a Memento. The Originator does not know the history of changes. You can set a concrete state to Originator from the outside, which will be considered as actual. The Originator must make sure that given state corresponds the allowed type of object. Originator may (but not should) have any methods, but they they can't make changes to the saved object state.</p>\n<p><strong>Caretaker</strong> controls the states history. He may make changes to an object; take a decision to save the state of an external object in the Originator; ask from the Originator snapshot of the current state; or set the Originator state to equivalence with some snapshot from history.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>The seed of a pseudorandom number generator </li>\n<li>The state in a finite state machine </li>\n<li>Control for intermediate states of ORM Model before saving</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/memento-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Memento</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Memento class contains a unique snapshot of something i.e an object, string, integer etc etc. State is passed in via construct, the getState method returns the state stored on the Memento class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Memento;\n\nclass Memento\n{\n    public function __construct(private State $state)\n    {\n    }\n\n    public function getState(): State\n    {\n        return $this->state;\n    }\n}\n\n</code></pre>\n<p><b>State</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nState represents a state which can either be created, open, assigned or closed (in the example below). This state has a validation ensureIsValidState.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Memento;\n\nuse InvalidArgumentException;\n\nclass State implements \\Stringable\n{\n    public const STATE_CREATED = 'created';\n    public const STATE_OPENED = 'opened';\n    public const STATE_ASSIGNED = 'assigned';\n    public const STATE_CLOSED = 'closed';\n\n    private string $state;\n\n    /**\n     * @var string[]\n     */\n    private static array $validStates = [\n        self::STATE_CREATED,\n        self::STATE_OPENED,\n        self::STATE_ASSIGNED,\n        self::STATE_CLOSED,\n    ];\n\n    public function __construct(string $state)\n    {\n        self::ensureIsValidState($state);\n\n        $this->state = $state;\n    }\n\n    private static function ensureIsValidState(string $state)\n    {\n        if (!in_array($state, self::$validStates)) {\n            throw new InvalidArgumentException('Invalid state given');\n        }\n    }\n\n    public function __toString(): string\n    {\n        return $this->state;\n    }\n}\n\n</code></pre>\n<p><b>Ticket</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA Ticket has a state. If a particular method is called the currentState of the Ticket is changed. The Ticket class has saveToMemento and restoreFromMemento methods allowing the current state to be saved or restored via the Memento class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Memento;\n\n/**\n* Ticket is the \"Originator\" in this implementation\n*/\nclass Ticket\n{\n    private State $currentState;\n\n    public function __construct()\n    {\n        $this->currentState = new State(State::STATE_CREATED);\n    }\n\n    public function open()\n    {\n        $this->currentState = new State(State::STATE_OPENED);\n    }\n\n    public function assign()\n    {\n        $this->currentState = new State(State::STATE_ASSIGNED);\n    }\n\n    public function close()\n    {\n        $this->currentState = new State(State::STATE_CLOSED);\n    }\n\n    public function saveToMemento(): Memento\n    {\n        return new Memento(clone $this->currentState);\n    }\n\n    public function restoreFromMemento(Memento $memento)\n    {\n        $this->currentState = $memento->getState();\n    }\n\n    public function getState(): State\n    {\n        return $this->currentState;\n    }\n}\n\n</code></pre>\n<p><b>MementoTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAn example of the Memento design pattern. In this example we create and open a new ticket then save this state to the memento. The ticket is then assigned, and the code below demonstrates how the state can be rolled back via restoreFromMemento.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Memento\\Tests;\n\nuse DesignPatterns\\Behavioral\\Memento\\State;\nuse DesignPatterns\\Behavioral\\Memento\\Ticket;\nuse PHPUnit\\Framework\\TestCase;\n\nclass MementoTest extends TestCase\n{\n    public function testOpenTicketAssignAndSetBackToOpen()\n    {\n        $ticket = new Ticket();\n\n        // open the ticket\n        $ticket->open();\n        $openedState = $ticket->getState();\n        $this->assertSame(State::STATE_OPENED, (string) $ticket->getState());\n\n        $memento = $ticket->saveToMemento();\n\n        // assign the ticket\n        $ticket->assign();\n        $this->assertSame(State::STATE_ASSIGNED, (string) $ticket->getState());\n\n        // now restore to the opened state, but verify that the state object has been cloned for the memento\n        $ticket->restoreFromMemento($memento);\n\n        $this->assertSame(State::STATE_OPENED, (string) $ticket->getState());\n        $this->assertNotSame($openedState, $ticket->getState());\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 5,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 19,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Null Object Pattern",
    "meta_description": "NullObject is not a GoF design pattern but a schema which appears frequently enough to be considered a pattern",
    "title": "Null Object Pattern",
    "slug": "null-object-pattern",
    "description": "NullObject is not a GoF design pattern but a schema which appears frequently enough to be considered a pattern",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>NullObject is not a GoF (gang of four) design pattern but a schema which appears frequently enough to be considered a pattern. It has the following benefits:</p>\n<ul>\n<li>Client code is simplified</li>\n<li>Reduces the chance of null pointer exceptions </li>\n<li>Fewer conditionals require less test cases </li>\n</ul>\n<p>Methods that return an object or null should instead return an object or NullObject. </p>\n<p>NullObjects simplify boilerplate code such as <strong>if (!is_null($obj)) { $obj-&gt;callSomething();</strong>\nto just: <strong>$obj-&gt;callSomething();</strong> by eliminating the conditional check in client code.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>Null logger or null output to preserve a standard way of interaction between objects, even if the shouldn't do anything </li>\n<li>Null handler in a Chain of Responsibilities pattern </li>\n<li>Null command in a Command pattern</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/null-object-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Service</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nService class accepts a Logger via its construct, the doSomething method calls the log method contained within the Logger instance.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\NullObject;\n\nclass Service\n{\n    public function __construct(private Logger $logger)\n    {\n    }\n\n    /**\n     * do something ...\n     */\n    public function doSomething()\n    {\n        // notice here that you don't have to check if the logger is set with eg. is_null(), instead just use it\n        $this->logger->log('We are in ' . __METHOD__);\n    }\n}\n\n</code></pre>\n<p><b>Logger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nLogger interface that NullLogger and PrintLogger implement, ensuring these concrete classes have a log method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\NullObject;\n\n/**\n* Key feature: NullLogger must inherit from this interface like any other loggers\n*/\ninterface Logger\n{\n    public function log(string $str);\n}\n\n</code></pre>\n<p><b>Null Logger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNullLogger implements Logger (but does nothing)\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\NullObject;\n\nclass NullLogger implements Logger\n{\n    public function log(string $str)\n    {\n        // do nothing\n    }\n}\n\n</code></pre>\n<p><b>Print Logger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nPrintLogger implements Logger\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\NullObject;\n\nclass PrintLogger implements Logger\n{\n    public function log(string $str)\n    {\n        echo $str;\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnit tests showing the code above in action. Instead of a method which returns an object or null, you’d always return an object (and if required a null object). This approach also doesn’t break the Liskov Substitution Principle (LSP).\n</div>\n<pre><code class=\"language-php\">\npublic function testNullObject()\n{\n    $service = new Service(new NullLogger());\n    $this->expectOutputString('');\n    $service->doSomething();\n}\n\npublic function testStandardLogger()\n{\n    $service = new Service(new PrintLogger());\n    $this->expectOutputString('We are in DesignPatterns\\Behavioral\\NullObject\\Service::doSomething');\n    $service->doSomething();\n}\n\n</code></pre>",
    "active": 1,
    "position": 6,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 20,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Observer Pattern",
    "meta_description": "Usage of this pattern allows class functionality to be dynamically extended in runtime, helping to prevent code rot and ensuring functionality is decoupled.",
    "title": "Observer Pattern",
    "slug": "observer-pattern",
    "description": "Usage of this pattern allows class functionality to be dynamically extended in runtime, helping to prevent code rot and ensuring functionality is decoupled.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>A software pattern in which an object (subject) maintains a list of dependents (observers) and notifies them of state changes, usually by calling one of their methods. Usage of this pattern allows class functionality to be dynamically extended in runtime, helping to prevent code rot and ensuring functionality is decoupled.</p>\n<p><strong>Note: PHP already defines two interfaces that can help to implement this pattern: SplObserver and SplSubject.</strong></p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/observer-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>User</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUser implements SplSubject. It maintains a list of observers and sends notifications to them if changes are made to the User object (by calling notify).\n\nSplObjectStorage is an object which stores the list of observers, this list can be modified using the attach and detach methods. Notify loops through the observers and calls a method (enforced by an interface) for each observer.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Observer;\n\nuse SplSubject;\nuse SplObjectStorage;\nuse SplObserver;\n\n/**\n* User implements the observed object (called Subject), it maintains a list of observers and sends notifications to\n* them in case changes are made on the User object\n*/\nclass User implements SplSubject\n{\n  private SplObjectStorage $observers;\n  private $email;\n\n  public function __construct()\n  {\n      $this->observers = new SplObjectStorage();\n  }\n\n  public function attach(SplObserver $observer): void\n  {\n      $this->observers->attach($observer);\n  }\n\n  public function detach(SplObserver $observer): void\n  {\n      $this->observers->detach($observer);\n  }\n\n  public function changeEmail(string $email): void\n  {\n      $this->email = $email;\n      $this->notify();\n  }\n\n  public function notify(): void\n  {\n      /** @var SplObserver $observer */\n      foreach ($this->observers as $observer) {\n          $observer->update($this);\n      }\n  }\n}\n\n</code></pre>\n<p><b>UserObserver</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUserObserver (observer) will be attached to User (the subject). If the User object is changed, then we’ll notify all the attached observers about the change. \n<br/><br/>\nThe Observer implements SplObserver. This code example builds an array of changedUsers, however an Observer is generally useful for various scenarios which help us extend code, e.g if the ‘subject’ was an HTML page object, then the observers could be HTML components objects which build the page (different components could be attached based on which page you’re visiting and/or business logic).\n<br/><br/>\nOnce the HTML page is ready to be rendered you’d notify each attached component and get the HTML component data from each.</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Observer;\n\nuse SplObserver;\nuse SplSubject;\n\nclass UserObserver implements SplObserver\n{\n    /**\n     * @var SplSubject[]\n     */\n    private array $changedUsers = [];\n\n    /**\n     * It is called by the Subject, usually by SplSubject::notify()\n     */\n    public function update(SplSubject $subject): void\n    {\n        $this->changedUsers[] = clone $subject;\n    }\n\n    /**\n     * @return SplSubject[]\n     */\n    public function getChangedUsers(): array\n    {\n        return $this->changedUsers;\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 7,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 21,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Specification Pattern",
    "meta_description": "Builds a clear specification of business rules, where objects can be checked against.",
    "title": "Specification Pattern",
    "slug": "specification-pattern",
    "description": "Builds a clear specification of business rules, where objects can be checked against.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Builds a clear specification of business rules, where objects can be checked against. The composite specification class has one method called isSatisfiedBy that returns either true or false depending on whether the given object satisfies the specification.</p>\n<p><strong>A great use case for this is to validate objects. Example (with unit test) below.</strong></p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/specification-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Item</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBasic Item class which accepts a float ($price) via the construct. A getter method getPrice returns the price.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\nclass Item\n{\n    public function __construct(private float $price)\n    {\n    }\n\n    public function getPrice(): float\n    {\n        return $this->price;\n    }\n}\n\n</code></pre>\n<p><b>Specification</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nSpecification Interface. A contract that sub classes must adhere to if they implement it. This interface forces classes which implement it to have a isSatisfiedBy method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\ninterface Specification\n{\n    public function isSatisfiedBy(Item $item): bool;\n}\n\n</code></pre>\n<p><b>AndSpecification</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAndSpecification is a concrete class which implements Specification. It accepts multiple Specifications via construct, then it’s isSatisifiedBy method loops through each one and checks each classes version of isSatisifiedBy. If one of them returns false, isSatisified for AndSpecification fails.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\nclass AndSpecification implements Specification\n{\n    /**\n    * @var Specification[]\n    */\n    private array $specifications;\n\n    /**\n     * @param Specification[] $specifications\n     */\n    public function __construct(Specification ...$specifications)\n    {\n        $this->specifications = $specifications;\n    }\n\n    /**\n     * if at least one specification is false, return false, else return true.\n     */\n    public function isSatisfiedBy(Item $item): bool\n    {\n        foreach ($this->specifications as $specification) {\n            if (!$specification->isSatisfiedBy($item)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n</code></pre>\n<p><b>NotSpecification</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNotSpecification is a concrete class which implements Specification. It accepts a Specification via construct, then it’s isSatisifiedBy methods check the inverse of the Specification passed to it. I.e if the specifications isSatisifedBy returns false, then we return true (NotSpecification works out to the true).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\nclass NotSpecification implements Specification\n{\n    public function __construct(private Specification $specification)\n    {\n    }\n\n    public function isSatisfiedBy(Item $item): bool\n    {\n        return !$this->specification->isSatisfiedBy($item);\n    }\n}\n\n</code></pre>\n<p><b>OrSpecification</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOrSpecification is a concrete class which implements Specification. It accepts multiple Specifications via construct, then it’s isSatisifiedBy method loops through each one and checks each classes version of isSatisifiedBy. If one of them returns true, isSatisified for OrSpecification succeeds, otherwise it fails.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\nclass OrSpecification implements Specification\n{\n/**\n* @var Specification[]\n*/\nprivate array $specifications;\n\n    /**\n     * @param Specification[] $specifications\n     */\n    public function __construct(Specification ...$specifications)\n    {\n        $this->specifications = $specifications;\n    }\n\n    /*\n     * if at least one specification is true, return true, else return false\n     */\n    public function isSatisfiedBy(Item $item): bool\n    {\n        foreach ($this->specifications as $specification) {\n            if ($specification->isSatisfiedBy($item)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n</code></pre>\n<p><b>PriceSpecification</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nPriceSpecification is a concrete class which implements Specification. It accepts a minPrice and maxPrice via construct, then it’s isSatisifiedBy method checks if an Item’s given price is within minPrice and maxPrice, if it is, then isSatisfiedBy returns true, otherwise false.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification;\n\nclass PriceSpecification implements Specification\n{\n    public function __construct(private ?float $minPrice, private ?float $maxPrice)\n    {\n    }\n\n    public function isSatisfiedBy(Item $item): bool\n    {\n        if ($this->maxPrice !== null && $item->getPrice() > $this->maxPrice) {\n            return false;\n        }\n\n        if ($this->minPrice !== null && $item->getPrice() < $this->minPrice) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n</code></pre>\n<p><b>SpecificationTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nSpecificationTest is a unit test which tests each aspect of the work above.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Specification\\Tests;\n\nuse DesignPatterns\\Behavioral\\Specification\\Item;\nuse DesignPatterns\\Behavioral\\Specification\\NotSpecification;\nuse DesignPatterns\\Behavioral\\Specification\\OrSpecification;\nuse DesignPatterns\\Behavioral\\Specification\\AndSpecification;\nuse DesignPatterns\\Behavioral\\Specification\\PriceSpecification;\nuse PHPUnit\\Framework\\TestCase;\n\nclass SpecificationTest extends TestCase\n{\n    public function testCanOr()\n    {\n        $spec1 = new PriceSpecification(50, 99);\n        $spec2 = new PriceSpecification(101, 200);\n\n        $orSpec = new OrSpecification($spec1, $spec2);\n\n        $this->assertFalse($orSpec->isSatisfiedBy(new Item(100)));\n        $this->assertTrue($orSpec->isSatisfiedBy(new Item(51)));\n        $this->assertTrue($orSpec->isSatisfiedBy(new Item(150)));\n    }\n\n    public function testCanAnd()\n    {\n        $spec1 = new PriceSpecification(50, 100);\n        $spec2 = new PriceSpecification(80, 200);\n\n        $andSpec = new AndSpecification($spec1, $spec2);\n\n        $this->assertFalse($andSpec->isSatisfiedBy(new Item(150)));\n        $this->assertFalse($andSpec->isSatisfiedBy(new Item(1)));\n        $this->assertFalse($andSpec->isSatisfiedBy(new Item(51)));\n        $this->assertTrue($andSpec->isSatisfiedBy(new Item(100)));\n    }\n\n    public function testCanNot()\n    {\n        $spec1 = new PriceSpecification(50, 100);\n        $notSpec = new NotSpecification($spec1);\n\n        $this->assertTrue($notSpec->isSatisfiedBy(new Item(150)));\n        $this->assertFalse($notSpec->isSatisfiedBy(new Item(50)));\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 8,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 22,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - State Pattern",
    "meta_description": "Encapsulate varying behaviour for the same routine based on an object's state. This can be a cleaner way for an object to change its behaviour at runtime without resorting to large monolithic conditional statements.",
    "title": "State Pattern",
    "slug": "state-pattern",
    "description": "Encapsulate varying behaviour for the same routine based on an object's state. This can be a cleaner way for an object to change its behaviour at runtime without resorting to large monolithic conditional statements.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Encapsulate varying behaviour for the same routine based on an object's state. This can be a cleaner way for an object to change its behaviour at runtime without resorting to large monolithic conditional statements.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/state-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>State</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nState interface defining method signature for proceedToNext and toString.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State;\n\ninterface State\n{\n    public function proceedToNext(OrderContext $context);\n    public function toString(): string;\n}\n\n</code></pre>\n<p><b>StateCreated</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nStateCreated implements State. The proceedToNext method changes the state to StateShipped. The toString method outputs ‘created’.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State;\n\nclass StateCreated implements State\n{\n    public function proceedToNext(OrderContext $context)\n    {\n        $context->setState(new StateShipped());\n    }\n\n    public function toString(): string\n    {\n        return 'created';\n    }\n}\n\n</code></pre>\n<p><b>StateShipped</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nStateShipped implements State. The proceedToNext method changes the state to StateDone. The toString method outputs ‘shipped’.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State;\n\nclass StateShipped implements State\n{\n    public function proceedToNext(OrderContext $context)\n    {\n        $context->setState(new StateDone());\n    }\n\n    public function toString(): string\n    {\n        return 'shipped';\n    }\n}\n\n</code></pre>\n<p><b>StateDone</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nStateDone implements State. The proceedToNext method doesn’t do anything, as there’s nothing left to do. The toString method outputs ‘done’.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State;\n\nclass StateDone implements State\n{\n    public function proceedToNext(OrderContext $context)\n    {\n        // there is nothing more to do\n    }\n\n    public function toString(): string\n    {\n        return 'done';\n    }\n}\n\n</code></pre>\n<p><b>OrderContext</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOrderContext manages and holds a state. When OrderContent is created the state is set to StateCreated.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State;\n\nclass OrderContext\n{\n    private State $state;\n\n    public static function create(): OrderContext\n    {\n        $order = new self();\n        $order->state = new StateCreated();\n\n        return $order;\n    }\n\n    public function setState(State $state)\n    {\n        $this->state = $state;\n    }\n\n    public function proceedToNext()\n    {\n        $this->state->proceedToNext($this);\n    }\n\n    public function toString()\n    {\n        return $this->state->toString();\n    }\n}\n\n</code></pre>\n<p><b>StateTest</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nQuick unit test showing the design pattern in action. Shows how the order state can be changed via a method call to create initially, then proceedToNext.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\State\\Tests;\n\nuse DesignPatterns\\Behavioral\\State\\OrderContext;\nuse PHPUnit\\Framework\\TestCase;\n\nclass StateTest extends TestCase\n{\n    public function testIsCreatedWithStateCreated()\n    {\n        $orderContext = OrderContext::create();\n\n        $this->assertSame('created', $orderContext->toString());\n    }\n\n    public function testCanProceedToStateShipped()\n    {\n        $contextOrder = OrderContext::create();\n        $contextOrder->proceedToNext();\n\n        $this->assertSame('shipped', $contextOrder->toString());\n    }\n\n    public function testCanProceedToStateDone()\n    {\n        $contextOrder = OrderContext::create();\n        $contextOrder->proceedToNext();\n        $contextOrder->proceedToNext();\n\n        $this->assertSame('done', $contextOrder->toString());\n    }\n\n    public function testStateDoneIsTheLastPossibleState()\n    {\n        $contextOrder = OrderContext::create();\n        $contextOrder->proceedToNext();\n        $contextOrder->proceedToNext();\n        $contextOrder->proceedToNext();\n\n        $this->assertSame('done', $contextOrder->toString());\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 9,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 23,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Strategy Pattern",
    "meta_description": "To separate strategies and to enable fast switching between them. Also this pattern is a good alternative to inheritance (instead of having an abstract class that is extended).",
    "title": "Strategy Pattern",
    "slug": "strategy-pattern",
    "description": "To separate strategies and to enable fast switching between them. Also this pattern is a good alternative to inheritance (instead of having an abstract class that is extended).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To separate strategies and to enable fast switching between them. Also this pattern is a good alternative to inheritance (instead of having an abstract class that is extended).</p>\n<p>Essentially by passing an object into the construct (it’s recommended that you type hint to an interface) you can 'execute a strategy' (i.e do something) on the given object using data passed in via methods parameters.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>Sorting a list of objects, one strategy by date, the other by id </li>\n<li>Simplify unit testing: e.g. switching between file and in-memory storage</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/strategy-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Comparator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nComparator is an Interface with a compare method signature, any class which implements Comparator must have a compare method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Strategy;\n\ninterface Comparator\n{\n  /**\n  * @param mixed $a\n  * @param mixed $b\n  */\n  public function compare($a, $b): int; \n\n}\n\n</code></pre>\n<p><b>DateComparator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nDateComparator contains a compare method which compares two given dates. It implements Comparator to ensure it contains a compare method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Strategy;\n\nuse DateTime;\n\nclass DateComparator implements Comparator\n{\n    public function compare($a, $b): int\n    {\n        $aDate = new DateTime($a['date']);\n        $bDate = new DateTime($b['date']);\n\n        return $aDate <=> $bDate;\n    }\n}\n\n</code></pre>\n<p><b>IdComparator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nIdComparator contains a compare method which compares two given ids. It implements Comparator to ensure it contains a compare method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Strategy;\n\nclass IdComparator implements Comparator\n{\n    public function compare($a, $b): int\n    {\n        return $a['id'] <=> $b['id'];\n    }\n}\n\n</code></pre>\n<p><b>Context</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nContext is passed an object via construct which can referenced in the executeStrategy method. In the example below, we’re using the compare method to sort an array of elements. \n<br/><br/>\nHowever, executeStrategy could potentially do anything you want with the object passed into the construct. The executeStrategy method parameters also can change to whatever is required.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Strategy;\n\nclass Context\n{\n    public function __construct(private Comparator $comparator)\n    {\n    }\n\n    public function executeStrategy(array $elements): array\n    {\n        uasort($elements, [$this->comparator, 'compare']);\n\n        return $elements;\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnit test examples\n</div>\n<pre><code class=\"language-php\">\npublic function provideIntegers()\n{\n    return [\n        [\n            [['id' => 2], ['id' => 1], ['id' => 3]],\n            ['id' => 1],\n        ],\n        [\n            [['id' => 3], ['id' => 2], ['id' => 1]],\n            ['id' => 1],\n        ],\n    ];\n}\n\npublic function provideDates()\n{\n    return [\n        [\n            [['id' => 2], ['id' => 1], ['id' => 3]],\n            ['id' => 1],\n        ],\n        [\n            [['id' => 3], ['id' => 2], ['id' => 1]],\n            ['id' => 1],\n        ],\n    ];\n}\n\n/**\n* @dataProvider provideIntegers\n*\n* @param array $collection\n* @param array $expected\n*/\npublic function testIdComparator($collection, $expected)\n{\n    $obj = new Context(new IdComparator());\n    $elements = $obj->executeStrategy($collection);\n\n    $firstElement = array_shift($elements);\n    $this->assertSame($expected, $firstElement);\n}\n\n/**\n* @dataProvider provideDates\n* \n* @param array $collection\n* @param array $expected\n*/\npublic function testDateComparator($collection, $expected)\n{\n    $obj = new Context(new DateComparator());\n    $elements = $obj->executeStrategy($collection);\n\n    $firstElement = array_shift($elements);\n    $this->assertSame($expected, $firstElement);\n}\n\n</code></pre>",
    "active": 1,
    "position": 10,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 24,
    "user_id": 1,
    "category_id": 4,
    "meta_title": "Design Patterns - Visitor Pattern",
    "meta_description": "The Visitor Pattern lets you outsource operations on objects to other objects. The main reason to do this is to keep a separation of concerns. But classes have to define a contract to allow visitors.",
    "title": "Visitor Pattern",
    "slug": "visitor-pattern",
    "description": "The Visitor Pattern lets you outsource operations on objects to other objects. The main reason to do this is to keep a separation of concerns. But classes have to define a contract to allow visitors.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>The Visitor Pattern lets you outsource operations on objects to other objects. The main reason to do this is to keep a separation of concerns. But classes have to define a contract to allow visitors (the Role::accept method in the example).</p>\n<p>The contract is an abstract class but you can have also a clean interface. In that case, each Visitor has to choose itself which method to invoke on the visitor.</p>\n<p><strong>An approach to add objects (known as roles) to other objects (known as visitors). The visitor object visits a role object and in doing so, the role becomes attached to the visitor (allowing it to access its methods and properties).</strong></p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/visitor-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Role</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nRole interface which defines an accept method which is passed an instance of RoleVisitor.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Visitor;\n\ninterface Role\n{\n    public function accept(RoleVisitor $visitor);\n}\n\n</code></pre>\n<p><b>Group</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nGroup implements Role interface. The accept method expects an instance of RoleVisitor, once accept is called, the visitor attaches the role class to itself (via the visitGroup method).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Visitor;\n\nclass Group implements Role\n{\n    public function __construct(private string $name)\n    {\n    }\n\n    public function getName(): string\n    {\n        return sprintf('Group: %s', $this->name);\n    }\n\n    public function accept(RoleVisitor $visitor)\n    {\n        $visitor->visitGroup($this);\n    }\n}\n\n</code></pre>\n<p><b>User</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUser implements Role interface. The accept method expects an instance of RoleVisitor, once accept is called, the visitor attaches the role class to itself (via the VisitUser method).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Visitor;\n\nclass User implements Role\n{\n    public function __construct(private string $name)\n    {\n    }\n\n    public function getName(): string\n    {\n        return sprintf('User %s', $this->name);\n    }\n\n    public function accept(RoleVisitor $visitor)\n    {\n        $visitor->visitUser($this);\n    }\n}\n\n</code></pre>\n<p><b>RoleVisitor</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nRoleVisitor interface that the visitor subclasses must implement.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Visitor;\n\n/**\n* Note: the visitor must not choose itself which method to\n* invoke, it is the visited object that makes this decision\n*/\ninterface RoleVisitor\n{\n    public function visitUser(User $role);\n    public function visitGroup(Group $role);\n}\n\n</code></pre>\n<p><b>RecordingVisitor</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe RecordingVisitor is the visitor class which ‘visits' role classes and in doing the visitor class obtains access to the role class; its methods and properties.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Behavioral\\Visitor;\n\nclass RecordingVisitor implements RoleVisitor\n{\n   /**\n    * @var Role[]\n    */\n    private array $visited = [];\n\n    public function visitGroup(Group $role)\n    {\n        $this->visited[] = $role;\n    }\n\n    public function visitUser(User $role)\n    {\n        $this->visited[] = $role;\n    }\n\n    /**\n     * @return Role[]\n     */\n    public function getVisited(): array\n    {\n        return $this->visited;\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnit test demonstrating how it works.\n</div>\n<pre><code class=\"language-php\">\nprivate RecordingVisitor $visitor;\n\nprotected function setUp(): void\n{\n    $this->visitor = new RecordingVisitor();\n}\n\npublic function provideRoles()\n{\n    return [\n        [new User('Dominik')],\n        [new Group('Administrators')],\n    ];\n}\n\n/**\n* @dataProvider provideRoles\n*/\npublic function testVisitSomeRole(Role $role)\n{ \n    $role->accept($this->visitor);\n    $this->assertSame($role, $this->visitor->getVisited()[0]);\n}\n\n</code></pre>",
    "active": 1,
    "position": 11,
    "created_at": "2022-08-27 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 25,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Abstract Factory Pattern",
    "meta_description": "To create series of related or dependent objects without specifying their concrete classes",
    "title": "Abstract Factory Pattern",
    "slug": "abstract-factory-pattern",
    "description": "To create series of related or dependent objects without specifying their concrete classes",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To create series of related or dependent objects without specifying their concrete classes. Usually the created classes all implement the same interface. The client of the abstract factory does not care about how these objects are created, it just knows how they go together.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/abstract-factory-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>WriterFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA WriterFactory interface which factory classes must implement (and thus adhere to). We’re adding two methods - createCsvWriter and createJsonWriter.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\ninterface WriterFactory\n{\n    public function createCsvWriter(): CsvWriter;\n    public function createJsonWriter(): JsonWriter;\n}\n\n</code></pre>\n<p><b>UnixWriterFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnixWriterFactory implements WriterFactory and returns new instances of UnixCsvWriter and UnixJsonWriter depending on which method is called.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass UnixWriterFactory implements WriterFactory\n{\n    public function createCsvWriter(): CsvWriter\n    {\n        return new UnixCsvWriter();\n    }\n\n    public function createJsonWriter(): JsonWriter\n    {\n        return new UnixJsonWriter();\n    }\n}\n\n</code></pre>\n<p><b>WinWriterFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWinWriterFactory implements WriterFactory and returns new instances of WinCsvWriter and WinJsonWriter depending on which method is called.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass WinWriterFactory implements WriterFactory\n{\n    public function createCsvWriter(): CsvWriter\n    {\n        return new WinCsvWriter();\n    }\n\n    public function createJsonWriter(): JsonWriter\n    {\n        return new WinJsonWriter();\n    }\n}\n\n</code></pre>\n<p><b>CsvWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA CsvWriter interface which concrete classes must implement (and thus adhere to). We’re adding one methods - write.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\ninterface CsvWriter\n{\n    public function write(array $line): string;\n}\n\n</code></pre>\n<p><b>UnixCsvWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnixCsvWriter overrides the write method and implements CsvWriter interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass UnixCsvWriter implements CsvWriter\n{\n    public function write(array $line): string\n    {\n        return join(',', $line) . \"\\n\";\n    }\n}\n\n</code></pre>\n<p><b>WinCsvWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWinCsvWriter overrides the write method and implements CsvWriter interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass WinCsvWriter implements CsvWriter\n{\n    public function write(array $line): string\n    {\n        return join(',', $line) . \"\\r\\n\";\n    }\n}\n\n</code></pre>\n<p><b>JsonWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA JsonWriter interface which concrete classes must implement (and thus adhere to). We’re adding one methods - write.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\ninterface JsonWriter\n{\n    public function write(array $data, bool $formatted): string;\n}\n\n</code></pre>\n<p><b>UnixJsonWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nUnixJsonWriter overrides the write method and implements JsonWriter interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass UnixJsonWriter implements JsonWriter\n{\n    public function write(array $data, bool $formatted): string\n    {\n        $options = 0;\n\n        if ($formatted) {\n            $options = JSON_PRETTY_PRINT;\n        }\n\n        return json_encode($data, $options);\n    }\n}\n\n</code></pre>\n<p><b>WinJsonWriter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWinJsonWriter overrides the write method and implements JsonWriter interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\AbstractFactory;\n\nclass WinJsonWriter implements JsonWriter\n{\n    public function write(array $data, bool $formatted): string\n    {\n        return json_encode($data, JSON_PRETTY_PRINT);\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe factory in action. Our test method below is type hinted to the WriterFactory meaning we can pass in any factory class which implements WriterFactory. \n<br/><br/>\nThe methods createJsonWriter and createCsvWriter return an instance of JsonWriter and CsvWriter.\n</div>\n<pre><code class=\"language-php\">\npublic function provideFactory()\n{\n    return [\n        [new UnixWriterFactory()],\n        [new WinWriterFactory()]\n    ];\n}\n\n/**\n* @dataProvider provideFactory\n*/\npublic function testCanCreateCsvWriterOnUnix(WriterFactory $writerFactory)\n{\n    $this->assertInstanceOf(JsonWriter::class, $writerFactory->createJsonWriter());\n    $this->assertInstanceOf(CsvWriter::class, $writerFactory->createCsvWriter());\n}\n\n</code></pre>",
    "active": 1,
    "position": 0,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 26,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Builder Pattern",
    "meta_description": "Builder is an interface that build parts of a complex object.",
    "title": "Builder Pattern",
    "slug": "builder-pattern",
    "description": "Builder is an interface that build parts of a complex object.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Builder is an interface that build parts of a complex object.</p>\n<p>Sometimes, if the builder has a better knowledge of what it builds, this interface could be an abstract class with default methods (aka adapter).</p>\n<p>If you have a complex inheritance tree for objects, it is logical to have a complex inheritance tree for builders too.</p>\n<p><strong>Note: Builders have often a fluent interface, see the mock builder of PHPUnit for example.</strong></p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>PHPUnit: Mock Builder</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/builder-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Builder</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBuilder Interface which concrete builder classes implement.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder;\n\nuse DesignPatterns\\Creational\\Builder\\Parts\\Vehicle;\n\ninterface Builder\n{\n    public function createVehicle();\n    public function addWheel();\n    public function addEngine();\n    public function addDoors();\n    public function getVehicle(): Vehicle;\n}\n\n</code></pre>\n<p><b>CarBuilder</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nCarBuilder is a concrete subclass implementing the Builder Interface. A new Instance of Car is created when the createVehicle method is called, the CarBuilder ‘add’ methods attach objects to the Car class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder;\n\nuse DesignPatterns\\Creational\\Builder\\Parts\\Door;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Engine;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Wheel;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Car;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Vehicle;\n\nclass CarBuilder implements Builder\n{\n    private Car $car;\n\n    public function addDoors()\n    {\n        $this->car->setPart('rightDoor', new Door());\n        $this->car->setPart('leftDoor', new Door());\n        $this->car->setPart('trunkLid', new Door());\n    }\n\n    public function addEngine()\n    {\n        $this->car->setPart('engine', new Engine());\n    }\n\n    public function addWheel()\n    {\n        $this->car->setPart('wheelLF', new Wheel());\n        $this->car->setPart('wheelRF', new Wheel());\n        $this->car->setPart('wheelLR', new Wheel());\n        $this->car->setPart('wheelRR', new Wheel());\n    }\n\n    public function createVehicle()\n    {\n        $this->car = new Car();\n    }\n\n    public function getVehicle(): Vehicle\n    {\n        return $this->car;\n    }\n}\n\n</code></pre>\n<p><b>TruckBuilder</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nTruckBuilder is a concrete subclass implementing the Builder Interface. A new Instance of Truck is created when the createVehicle method is called, the TruckBuilder ‘add’ methods attach objects to the Truck class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder;\n\nuse DesignPatterns\\Creational\\Builder\\Parts\\Door;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Engine;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Wheel;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Truck;\nuse DesignPatterns\\Creational\\Builder\\Parts\\Vehicle;\n\nclass TruckBuilder implements Builder\n{\n    private Truck $truck;\n\n    public function addDoors()\n    {\n        $this->truck->setPart('rightDoor', new Door());\n        $this->truck->setPart('leftDoor', new Door());\n    }\n\n    public function addEngine()\n    {\n        $this->truck->setPart('truckEngine', new Engine());\n    }\n\n    public function addWheel()\n    {\n        $this->truck->setPart('wheel1', new Wheel());\n        $this->truck->setPart('wheel2', new Wheel());\n        $this->truck->setPart('wheel3', new Wheel());\n        $this->truck->setPart('wheel4', new Wheel());\n        $this->truck->setPart('wheel5', new Wheel());\n        $this->truck->setPart('wheel6', new Wheel());\n    }\n\n    public function createVehicle()\n    {\n        $this->truck = new Truck();\n    }\n\n    public function getVehicle(): Vehicle\n    {\n        return $this->truck;\n    }\n}\n\n</code></pre>\n<p><b>Director</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Director is part of the builder pattern. The build method accepts a class instance of Builder (so in this example either TruckBuilder or CarBuilder) then builds and returns the vehicle.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder;\n\nuse DesignPatterns\\Creational\\Builder\\Parts\\Vehicle;\n\n/**\n* Director is part of the builder pattern. It knows the interface of the builder\n* and builds a complex object with the help of the builder\n* \n* You can also inject many builders instead of one to build more complex objects\n*/\nclass Director\n{\n    public function build(Builder $builder): Vehicle\n    {\n        $builder->createVehicle();\n        $builder->addDoors();\n        $builder->addEngine();\n        $builder->addWheel();\n\n        return $builder->getVehicle();\n    }\n}\n\n</code></pre>\n<p><b>Vehicle</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nHandles the boilerplate code across the Vehicle concrete subclasses (Car and Truck) which extend this abstract class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nabstract class Vehicle\n{\n    final public function setPart(string $key, object $value)\n    {\n    }\n}\n\n</code></pre>\n<p><b>Car</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Car Class which extends Vehicle. The CarBuilder createVehicle returns this object, then the builders ‘add’ methods attach parts to it.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nclass Car extends Vehicle\n{\n}\n\n</code></pre>\n<p><b>Truck</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe Truck Class which extends Vehicle. The TruckBuilder createVehicle returns this object, then the builders ‘add’ methods attach parts to it.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nclass Truck extends Vehicle\n{\n}\n\n</code></pre>\n<p><b>Parts - Door</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nDoor is a class which gets attached via the builder to Vehicle subclass.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nclass Door\n{\n}\n\n</code></pre>\n<p><b>Parts - Engine</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nEngine is a class which gets attached via the builder to Vehicle subclass.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nclass Engine\n{\n}\n\n</code></pre>\n<p><b>Parts - Wheel</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWheel is a class which gets attached via the builder to Vehicle subclass.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Builder\\Parts;\n\nclass Wheel\n{\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how you’d build a Car and a Truck.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanBuildTruck()\n{\n    $truckBuilder = new TruckBuilder();\n    $newVehicle = (new Director())->build($truckBuilder);\n\n    $this->assertInstanceOf(Truck::class, $newVehicle);\n}\n\npublic function testCanBuildCar()\n{\n    $carBuilder = new CarBuilder();\n    $newVehicle = (new Director())->build($carBuilder);\n\n    $this->assertInstanceOf(Car::class, $newVehicle);\n}\n\n</code></pre>",
    "active": 1,
    "position": 1,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 27,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Factory Method Pattern",
    "meta_description": "Factory method allows subclassing to implement different ways to create objects. It depends on abstractions, not concrete classes.",
    "title": "Factory Method Pattern",
    "slug": "factory-method-pattern",
    "description": "Factory method allows subclassing to implement different ways to create objects. It depends on abstractions, not concrete classes.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>The good point over the SimpleFactory is you can subclass it to implement different ways to create objects.</p>\n<p>For simple cases, this abstract class could be just an interface.</p>\n<p>This pattern is a &quot;real&quot; Design Pattern because it achieves the Dependency Inversion principle a.k.a the &quot;D&quot; in SOLID principles.</p>\n<p>It means the FactoryMethod class depends on abstractions, not concrete classes. This is the real trick compared to SimpleFactory or StaticFactory</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/factory-method-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Logger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nLogger Interface - factories must adhere to this interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\ninterface Logger\n{\n    public function log(string $message);\n}\n\n</code></pre>\n<p><b>LoggerFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nLoggerFactory Interface - Concrete subclasses must adhere to this interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\ninterface LoggerFactory\n{\n    public function createLogger(): Logger;\n}\n\n</code></pre>\n<p><b>FileLogger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe FileLogger class is a concrete subclass which implements the Logger Interface, which forces it to have a log method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\nclass FileLogger implements Logger\n{\n    public function __construct(private string $filePath)\n    {\n    }\n\n    public function log(string $message)\n    {\n        file_put_contents($this->filePath, $message . PHP_EOL, FILE_APPEND);\n    }\n}\n\n</code></pre>\n<p><b>StdOutLogger</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe StdOutLogger class is a concrete subclass which implements the Logger Interface, which forces it to have a log method.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\nclass StdoutLogger implements Logger\n{\n    public function log(string $message)\n    {\n        echo $message;\n    }\n}\n\n</code></pre>\n<p><b>FileLoggerFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe FileLoggerFactory must implement the LoggerFactory interface, which forces it to have a createLogger method. The createLogger method returns an instance of Logger.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\nclass FileLoggerFactory implements LoggerFactory\n{\n    public function __construct(private string $filePath)\n    {\n    }\n\n    public function createLogger(): Logger\n    {\n        return new FileLogger($this->filePath);\n    }\n}\n\n</code></pre>\n<p><b>StdOutLoggerFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe StdOutLoggerFactory must implement the LoggerFactory interface, which forces it to have a createLogger method. The createLogger method returns an instance of Logger.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\FactoryMethod;\n\nclass StdoutLoggerFactory implements LoggerFactory\n{\n    public function createLogger(): Logger\n    {\n        return new StdoutLogger();\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of creating two class instances via the Factory Method.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanCreateStdoutLogging()\n{\n    $loggerFactory = new StdoutLoggerFactory();\n    $logger = $loggerFactory->createLogger();\n\n    $this->assertInstanceOf(StdoutLogger::class, $logger);\n}\n\npublic function testCanCreateFileLogging()\n{\n    $loggerFactory = new FileLoggerFactory(sys_get_temp_dir());\n    $logger = $loggerFactory->createLogger();\n\n    $this->assertInstanceOf(FileLogger::class, $logger);\n}\n\n</code></pre>",
    "active": 1,
    "position": 2,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 28,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Pool Pattern",
    "meta_description": "The object pool pattern is a software creational design pattern that uses a set of initialised objects kept ready to use – a \"pool\" – rather than allocating and destroying them on demand",
    "title": "Pool Pattern",
    "slug": "pool-pattern",
    "description": "The object pool pattern is a software creational design pattern that uses a set of initialised objects kept ready to use – a \"pool\" – rather than allocating and destroying them on demand",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>The <strong>object pool pattern</strong> is a software creational design pattern that uses a set of initialised objects kept ready to use – a &quot;pool&quot; – rather than allocating and destroying them on demand. A client of the pool will request an object from the pool and perform operations on the returned object. When the client has finished, it returns the object, which is a specific type of factory object, to the pool rather than destroying it.</p>\n<p>Object pooling can offer a significant performance boost in situations where the cost of initialising a class instance is high, the rate of instantiation of a class is high, and the number of instances in use at any one time is low. The pooled object is obtained in predictable time when creation of the new objects (especially over network) may take variable time.</p>\n<p>However these benefits are mostly true for objects that are expensive with respect to time, such as database connections, socket connections, threads and large graphic objects like fonts or bitmaps. In certain situations, simple object pooling (that hold no external resources, but only occupy memory) may not be efficient and could decrease performance.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/pool-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>WorkerPool</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe idea behind this is that once an instance of a class is required, we add them to an array of occupiedWorkers, once that class is finished with, we remove it from that array and assign to it a freeWorkers array.\n<br/><br/>\nIf another instance of the class is required but we’ve got freeWorkers available, you’d use that instance rather than creating a new one.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Pool;\n\nuse Countable;\n\nclass WorkerPool implements Countable\n{\n    /**\n    * @var StringReverseWorker[]\n    */\n    private array $occupiedWorkers = [];\n\n    /**\n     * @var StringReverseWorker[]\n     */\n    private array $freeWorkers = [];\n\n    public function get(): StringReverseWorker\n    {\n        if (count($this->freeWorkers) == 0) {\n            $worker = new StringReverseWorker();\n        } else {\n            $worker = array_pop($this->freeWorkers);\n        }\n\n        $this->occupiedWorkers[spl_object_hash($worker)] = $worker;\n\n        return $worker;\n    }\n\n    public function dispose(StringReverseWorker $worker)\n    {\n        $key = spl_object_hash($worker);\n\n        if (isset($this->occupiedWorkers[$key])) {\n            unset($this->occupiedWorkers[$key]);\n            $this->freeWorkers[$key] = $worker;\n        }\n    }\n\n    public function count(): int\n    {\n        return count($this->occupiedWorkers) + count($this->freeWorkers);\n    }\n}\n\n</code></pre>\n<p><b>StringReverseWorker</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAn example class instance used in the WorkerPool class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Pool;\n\nuse DateTime;\n\nclass StringReverseWorker\n{\n    public function __construct()\n    {\n    }\n\n    public function run(string $text): string\n    {\n        return strrev($text);\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe only annoying aspect is that you’ll need to specifically dispose of an object once you’re finished using it. It also doesn’t make sense to use this on objects which aren’t extensive to create, it’s better suited for database connections or large graphic objects etc.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanGetNewInstancesWithGet()\n{\n    $pool = new WorkerPool();\n    $worker1 = $pool->get();\n    $worker2 = $pool->get();\n\n    $this->assertCount(2, $pool);\n    $this->assertNotSame($worker1, $worker2);\n}\n\npublic function testCanGetSameInstanceTwiceWhenDisposingItFirst()\n{\n    $pool = new WorkerPool();\n    $worker1 = $pool->get();\n    $pool->dispose($worker1);\n    $worker2 = $pool->get();\n\n    $this->assertCount(1, $pool);\n    $this->assertSame($worker1, $worker2);\n}\n\n</code></pre>",
    "active": 1,
    "position": 3,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 29,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Prototype Pattern",
    "meta_description": "To avoid the cost of creating objects the standard way (new Foo()) and instead create a prototype and clone it.",
    "title": "Prototype Pattern",
    "slug": "prototype-pattern",
    "description": "To avoid the cost of creating objects the standard way (new Foo()) and instead create a prototype and clone it.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To avoid the cost of creating objects the standard way (new Foo()) and instead create a prototype and clone it.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<p>Large amounts of data (e.g. create 1,000,000 rows in a database at once via a ORM).</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/prototype-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>BookPrototype</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAbstract BookPrototype class that concrete subclasses (FooBookPrototype and BarBookPrototype) extend. This exists to eliminate boilerplate code (duplicate) over the concrete subclasses.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Prototype;\n\nabstract class BookPrototype\n{\n    protected string $title;\n    protected string $category;\n\n    abstract public function __clone();\n\n    final public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    final public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n}\n\n</code></pre>\n<p><b>FooBookPrototype</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nFooBookPrototype is a concrete subclass which extends BookPrototype.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Prototype;\n\nclass FooBookPrototype extends BookPrototype\n{\n    protected string $category = 'Foo';\n\n    public function __clone()\n    {\n    }\n}\n\n</code></pre>\n<p><b>BarBookPrototype</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBarBookPrototype is a concrete subclass which extends BookPrototype.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Prototype;\n\nclass BarBookPrototype extends BookPrototype\n{\n    protected string $category = 'Bar';\n\n    public function __clone()\n    {\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nIf we’re executing code which is quite expensive, we can avoid the cost of creating objects the typical way by cloning them. \n<br/><br/>\nIn the example below we’re looping through and cloning a prototype, then adjusting the title via the setTitle method.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanGetFooBook()\n{\n    $fooPrototype = new FooBookPrototype();\n    $barPrototype = new BarBookPrototype();\n\n    for ($i = 0; $i < 10; $i++) {\n        $book = clone $fooPrototype;\n        $book->setTitle('Foo Book No ' . $i);\n        $this->assertInstanceOf(FooBookPrototype::class, $book);\n    }\n\n    for ($i = 0; $i < 5; $i++) {\n        $book = clone $barPrototype;\n        $book->setTitle('Bar Book No ' . $i);\n        $this->assertInstanceOf(BarBookPrototype::class, $book);\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 4,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 30,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Simple Factory Pattern",
    "meta_description": "SimpleFactory is a simple factory pattern. It differs from the static factory because it is not static",
    "title": "Simple Factory Pattern",
    "slug": "simple-factory-pattern",
    "description": "SimpleFactory is a simple factory pattern. It differs from the static factory because it is not static",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p><strong>SimpleFactory</strong> is a simple factory pattern.</p>\n<p>It differs from the static factory because it is not static. Therefore, you can have multiple factories, differently parameterised, you can subclass it and you can mock it.</p>\n<p><strong>It has some advantages over a Static Factory but a Static Factory closes classes for modification, this technically doesn’t (if you needed to change the Simple Factory, you’d be adjusting the class its being called from).</strong></p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/static-factory-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Bicycle</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBicycle concrete class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\SimpleFactory;\n\nclass Bicycle\n{\n    public function driveTo(string $destination)\n    {\n    }\n}\n\n</code></pre>\n<p><b>SimpleFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nDefer to the SimpleFactory to return an instance of Bicycle. i.e:\n<b>container(SimpleFactory)->createBicycle();</b>\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\SimpleFactory;\n\nclass SimpleFactory\n{\n    public function createBicycle(): Bicycle\n    {\n        return new Bicycle();\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 5,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 31,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Singleton Pattern",
    "meta_description": "To have only one instance of this object in the application that will handle all calls.",
    "title": "Singleton Pattern",
    "slug": "singleton-pattern",
    "description": "To have only one instance of this object in the application that will handle all calls.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To have only one instance of this object in the application that will handle all calls.</p>\n<p><strong>THIS IS CONSIDERED TO BE AN ANTI-PATTERN! FOR BETTER TESTABILITY AND MAINTAINABILITY USE DEPENDENCY INJECTION!</strong></p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>DB Connector</li>\n<li>Logger </li>\n<li>Lock file for the application (there is only one in the filesystem ...)</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/singleton-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Singleton</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWith a Singleton you’re not allowed to create multiple instances. The instance is retrieved via lazy initialisation. i.e Singleton::getInstance(). If the instance has already been created, that is returned, otherwise it is created and returned.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\Singleton;\n\nuse Exception;\n\nfinal class Singleton\n{\n    private static ?Singleton $instance = null;\n\n    /**\n     * gets the instance via lazy initialization (created on first usage)\n     */\n    public static function getInstance(): Singleton\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * is not allowed to call from outside to prevent from creating multiple instances,\n     * to use the singleton, you have to obtain the instance from Singleton::getInstance() instead\n     */\n    private function __construct()\n    {\n    }\n\n    /**\n     * prevent the instance from being cloned (which would create a second instance of it)\n     */\n    private function __clone()\n    {\n    }\n\n    /**\n     * prevent from being unserialized (which would create a second instance of it)\n     */\n    public function __wakeup()\n    {\n        throw new Exception(\"Cannot unserialize singleton\");\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 6,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 32,
    "user_id": 1,
    "category_id": 5,
    "meta_title": "Design Patterns - Static Factory Pattern",
    "meta_description": "Similar to the AbstractFactory, this pattern is used to create series of related or dependent objects.",
    "title": "Static Factory Pattern",
    "slug": "static-factory-pattern",
    "description": "Similar to the AbstractFactory, this pattern is used to create series of related or dependent objects.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Similar to the AbstractFactory, this pattern is used to create series of related or dependent objects. The difference between this and the abstract factory pattern is that the static factory pattern uses just one static method to create all types of objects it can create. It is usually named <strong>factory</strong>, <strong>build</strong> or <strong>make</strong>.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/static-factory-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Formatter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nFormatter Interface that all concrete classes (FormatNumber and FormatText) must adhere to. Basically ensures they have a format method otherwise an error is thrown.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\StaticFactory;\n\ninterface Formatter\n{\n    public function format(string $input): string;\n}\n\n</code></pre>\n<p><b>FormatNumber</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNumberFormat concrete class which implements the Formatter Interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\StaticFactory;\n\nclass FormatNumber implements Formatter\n{\n    public function format(string $input): string\n    {\n        return number_format((int) $input);\n    }\n}\n\n</code></pre>\n<p><b>FormatString</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNumberFormat concrete class which implements the Formatter Interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\StaticFactory;\n\nclass FormatString implements Formatter\n{\n    public function format(string $input): string\n    {\n        return $input;\n    }\n}\n\n</code></pre>\n<p><b>StaticFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe StaticFactory class is called which returns the appropriate class. \n\ni.e StaticFactory::factory('string')->format('This is an example');\n\nUsing this approach stops the class calling the above being open to modification (only the StaticFactory would be open). You could defer to a config at this point, closing modification to the StaticFactory as well.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Creational\\StaticFactory;\n\nuse InvalidArgumentException;\n\n/**\n* Note1: Remember, static means global state which is evil because it can't be mocked for tests\n* Note2: Cannot be subclassed or mock-upped or have multiple different instances.\n*/\nfinal class StaticFactory\n{\n    public static function factory(string $type): Formatter \n    {\n        if ($type == 'number') {\n            return new FormatNumber();\n        } elseif ($type == 'string') {\n           return new FormatString();\n        }\n\n        throw new InvalidArgumentException('Unknown format given');\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 7,
    "created_at": "2022-08-17 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 33,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns -  Adapter Pattern",
    "meta_description": "To translate one interface for a class into a compatible interface. An adapter allows classes to work together that normally could not because of incompatible interfaces by providing its interface to clients while using the original interface.",
    "title": "Adapter Pattern",
    "slug": "adapter-pattern",
    "description": "To translate one interface for a class into a compatible interface. An adapter allows classes to work together that normally could not because of incompatible interfaces by providing its interface to clients while using the original interface.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To translate one interface for a class into a compatible interface. An adapter allows classes to work together that normally could not because of incompatible interfaces by providing its interface to clients while using the original interface.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>DB Client libraries adapter. </li>\n<li>Using multiple different web services and adapters normalise data so that the outcome is the same for all.</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/adapter-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Book</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nBook Interface\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Adapter;\n\ninterface Book\n{\n    public function turnPage();\n    public function open();\n    public function getPage(): int;\n}\n\n</code></pre>\n<p><b>EBook</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nEBook Interface\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Adapter;\n\ninterface EBook\n{\n    public function unlock();\n    public function pressNext();\n\n    /**\n     * returns current page and total number of pages, like [10, 100] is page 10 of 100\n     *\n     * @return int[]\n     */\n    public function getPage(): array;\n}\n\n</code></pre>\n<p><b>EBookAdapter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe EBookAdapter class implements a foreign Interface (Book) but accepts the EBook Interface as a construct parameter and adapters the EBook methods to work with Book.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Adapter;\n\n/**\n* This is the adapter here. Notice it implements Book,\n* therefore you don't have to change the code of the client which is using a Book\n*/\nclass EBookAdapter implements Book\n{\n    public function __construct(protected EBook $eBook)\n    {\n    }\n\n    /**\n    * This class makes the proper translation from one interface to another.\n    */\n    public function open()\n    {\n        $this->eBook->unlock();\n    }\n\n    public function turnPage()\n    {\n        $this->eBook->pressNext();\n    }\n\n    /**\n    * notice the adapted behavior here: EBook::getPage() will return two integers, but Book\n    * supports only a current page getter, so we adapt the behavior here\n    */\n    public function getPage(): int\n    {\n        return $this->eBook->getPage()[0];\n    }\n}\n\n</code></pre>\n<p><b>Kindle</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA Kindle class (a type of EBook)\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Adapter;\n\n/**\n* this is the adapted class. In production code, this could be a class from another package, some vendor code.\n* Notice that it uses another naming scheme and the implementation does something similar but in another way\n*/\nclass Kindle implements EBook\n{\n    private int $page = 1;\n    private int $totalPages = 100;\n\n    public function pressNext()\n    {\n        $this->page++;\n    }\n\n    public function unlock()\n    {\n    }\n\n    /**\n    * returns current page and total number of pages, like [10, 100] is page 10 of 100\n    * \n    * @return int[]\n    */\n    public function getPage(): array\n    {\n        return [$this->page, $this->totalPages];\n    } \n}\n\n</code></pre>\n<p><b>PaperBook</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA PaperBook class (a type of Book)\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Adapter;\n\nclass PaperBook implements Book\n{\n    private int $page;\n\n    public function open(): void\n    {\n        $this->page = 1;\n    }\n\n    public function turnPage(): void\n    {\n        $this->page++;\n    }\n\n    public function getPage(): int\n    {\n        return $this->page;\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA PaperBook; utilising its methods and a Kindle which is passed through the EBookAdapter giving it the same methods as a Book (Not eBook).\n</div>\n<pre><code class=\"language-php\">\npublic function testCanTurnPageOnBook()\n{\n    $book = new PaperBook();\n    $book->open();\n    $book->turnPage();\n\n    $this->assertSame(2, $book->getPage());\n}\n\npublic function testCanTurnPageOnKindleLikeInANormalBook()\n{\n    $kindle = new Kindle();\n    $book = new EBookAdapter($kindle);\n\n    $book->open();\n    $book->turnPage();\n\n    $this->assertSame(2, $book->getPage());\n}\n\n</code></pre>",
    "active": 1,
    "position": 0,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 34,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Bridge Pattern",
    "meta_description": "Decouple an abstraction from its implementation so that the two can vary independently.",
    "title": "Bridge Pattern",
    "slug": "bridge-pattern",
    "description": "Decouple an abstraction from its implementation so that the two can vary independently.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Decouple an abstraction from its implementation so that the two can vary independently.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/bridge-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Formatter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nFormatter Interface\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\ninterface Formatter\n{\n    public function format(string $text): string;\n}\n\n</code></pre>\n<p><b>Service</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of this Service class is to eliminate boilerplate code over the concrete service classes (HelloWorldService and PingService - which extend it). A class which implements the Formatter Interface is passed into its construct which adjusts the behaviour of the service.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\nabstract class Service\n{\n    public function __construct(protected Formatter $implementation)\n    {\n    }\n\n    final public function setImplementation(Formatter $printer)\n    {\n        $this->implementation = $printer;\n    }\n\n    abstract public function get(): string;\n}\n\n</code></pre>\n<p><b>HelloWorldService</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe HelloWorldService extends the abstract class Service.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\nclass HelloWorldService extends Service\n{\n    public function get(): string\n    {\n        return $this->implementation->format('Hello World');\n    }\n}\n\n</code></pre>\n<p><b>PingService</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe PingService class extends the abstract class Service.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\nclass PingService extends Service\n{\n    public function get(): string\n    {\n        return $this->implementation->format('pong');\n    }\n}\n\n</code></pre>\n<p><b>PlainTextFormatter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAdjusts the service output via formatting with plain text.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\nclass PlainTextFormatter implements Formatter\n{\n    public function format(string $text): string\n    {\n        return $text;\n    }\n}\n\n</code></pre>\n<p><b>HtmlFormatter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAdjusts the service output via formatting with HTML.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Bridge;\n\nclass HtmlFormatter implements Formatter\n{\n    public function format(string $text): string\n    {\n        return sprintf('<p>%s</p>', $text);\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWhen a service is instantiated, a formatter is passed into its construct which adjusts the behaviour.\ni.e - Output Hello World in Plain Text and Output Hello World wrapped in HTML tags.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanPrintUsingThePlainTextFormatter()\n{\n    $service = new HelloWorldService(new PlainTextFormatter());\n\n    $this->assertSame('Hello World', $service->get());\n}\n\npublic function testCanPrintUsingTheHtmlFormatter()\n{\n    $service = new HelloWorldService(new HtmlFormatter());\n\n    $this->assertSame('<p>Hello World</p>', $service->get());\n}\n\n</code></pre>",
    "active": 1,
    "position": 1,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 35,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Composite Pattern",
    "meta_description": "To treat a group of objects the same way as a single instance of the object.",
    "title": "Composite Pattern",
    "slug": "composite-pattern",
    "description": "To treat a group of objects the same way as a single instance of the object.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To treat a group of objects the same way as a single instance of the object.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<p>A form class instance handles all its form elements like a single instance of the form, when render() is called, it subsequently runs through all its child elements and calls render() on them</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/composite-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Renderable</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nRenderable Interface that everything implements.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Composite;\n\ninterface Renderable\n{\n    public function render(): string;\n}\n\n</code></pre>\n<p><b>Form</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe composite node. When render is called we loop through the attached elements and call render on those too. The node and its elements all implement the Renderable interface.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Composite;\n\n/**\n* The composite node MUST extend the component contract. This is mandatory for building\n* a tree of components.\n*/\nclass Form implements Renderable\n{\n    /**\n     * @var Renderable[]\n     */\n     private array $elements;\n\n    /**\n     * runs through all elements and calls render() on them, then returns the complete representation\n     * of the form.\n     * \n     * from the outside, one will not see this and the form will act like a single object instance\n     */\n     public function render(): string\n     {\n         $formCode = '<form>';\n\n         foreach ($this->elements as $element) {\n             $formCode .= $element->render();\n         }\n\n         return $formCode . '</form>';\n      }\n\n      public function addElement(Renderable $element)\n      {\n          $this->elements[] = $element;\n      }\n}\n\n</code></pre>\n<p><b>InputElement</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAn InputElement which implements the Renderable Interface. \nThis is attached to the composite node (Form).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Composite;\n\nclass InputElement implements Renderable\n{\n    public function render(): string\n    {\n        return '<input type=\"text\" />';\n    }\n}\n\n</code></pre>\n<p><b>TextElement</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nA TextElement which implements the Renderable Interface. \nThis is attached to the composite node (Form).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Composite;\n\nclass TextElement implements Renderable\n{\n    public function __construct(private string $text)\n    {\n    }\n\n    public function render(): string\n    {\n        return $this->text;\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nSeeing everything in action. It’s possible to attach build and attach nodes to nodes.\n</div>\n<pre><code class=\"language-php\">\npublic function testRender()\n{\n    // Start building form (1st)\n    $form = new Form();\n    $form->addElement(new TextElement('Email:'));\n    $form->addElement(new InputElement());\n\n    // Build another form (2nd)\n    $embed = new Form();\n    $embed->addElement(new TextElement('Password:'));\n    $embed->addElement(new InputElement());\n\n    // Attach 2nd form to 1st form\n    $form->addElement($embed);\n\n    // This is just an example, in a real world scenario it is \n    // important to remember that web browsers do not\n    // currently support nested forms\n\n    $this->assertSame(\n        '<form>Email:<input type=\"text\" /><form>Password:<input type=\"text\" /></form></form>',\n        $form->render()\n    );\n}\n\n</code></pre>",
    "active": 1,
    "position": 2,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 36,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Data Mapper",
    "meta_description": "A Data Access Layer that performs bidirectional transfer of data between a persistent data store (often a relational database) and an in memory data representation (the domain layer).",
    "title": "Data Mapper Pattern",
    "slug": "data-mapper-pattern",
    "description": "A Data Access Layer that performs bidirectional transfer of data between a persistent data store (often a relational database) and an in memory data representation (the domain layer).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>A Data Mapper, is a Data Access Layer that performs bidirectional transfer of data between a persistent data store (often a relational database) and an in memory data representation (the domain layer). The goal of the pattern is to keep the in memory representation and the persistent data store independent of each other and the data mapper itself. The layer is composed of one or more mappers (or Data Access Objects), performing the data transfer. Mapper implementations vary in scope. Generic mappers will handle many different domain entity types, dedicated mappers will handle one or a few.</p>\n<p>The key point of this pattern is, unlike Active Record pattern, the data model follows Single Responsibility Principle.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<p>DB Object Relational Mapper (ORM).</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/data-mapper-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>StorageAdapter</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe StorageAdapter is a data store. Data is passed in via the construct. \n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\DataMapper;\n\nclass StorageAdapter\n{\n    public function __construct(private array $data)\n    {\n    }\n\n    /**\n     * @return array|null\n     */\n    public function find(int $id)\n    {\n        if (isset($this->data[$id])) {\n            return $this->data[$id];\n        }\n\n        return null;\n    }\n}\n\n</code></pre>\n<p><b>User</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe User object is returned when accessing data from the UserWrapper.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\DataMapper;\n\nclass User\n{\n    public static function fromState(array $state): User\n    {\n        // validate state before accessing keys!\n        return new self(\n            $state['username'],\n            $state['email']\n        );\n    }\n\n    public function __construct(private string $username, private string $email)\n    {\n    }\n\n    public function getUsername(): string\n    {\n        return $this->username;\n    }\n\n    public function getEmail(): string\n    {\n        return $this->email;\n    }\n}\n\n</code></pre>\n<p><b>UserMapper</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe UserMapper accepts a StorageAdapter as a construct parameter. The UserMapper contains methods which can be used to push and pull the data within the StorageAdapter and returns an instance of User.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\DataMapper;\n\nuse InvalidArgumentException;\n\nclass UserMapper\n{\n    public function __construct(private StorageAdapter $adapter)\n    {\n    }\n\n    /**\n     * finds a user from storage based on ID and returns a User object located\n     * in memory. Normally this kind of logic will be implemented using the Repository pattern.\n     * However the important part is in mapRowToUser() below, that will create a business object from the\n     * data fetched from storage\n     */\n    public function findById(int $id): User\n    {\n        $result = $this->adapter->find($id);\n\n        if ($result === null) {\n            throw new InvalidArgumentException(\"User #$id not found\");\n        }\n\n        return $this->mapRowToUser($result);\n    }\n\n    private function mapRowToUser(array $row): User\n    {\n        return User::fromState($row);\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nTest cases, which demonstrate how to use the pattern.\n</div>\n<pre><code class=\"language-php\">\npublic function testCanMapUserFromStorage()\n{\n    $storage = new StorageAdapter([1 => ['username' => 'domnikl', 'email' => 'liebler.dominik@gmail.com']]);\n    $mapper = new UserMapper($storage);\n\n    $user = $mapper->findById(1);\n\n    $this->assertInstanceOf(User::class, $user);\n}\n\npublic function testWillNotMapInvalidData()\n{\n    $this->expectException(InvalidArgumentException::class);\n\n    $storage = new StorageAdapter([]);\n    $mapper = new UserMapper($storage);\n\n    $mapper->findById(1);\n}\n\n</code></pre>",
    "active": 1,
    "position": 3,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 37,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Decorator Pattern",
    "meta_description": "To dynamically add new functionality to class instances.",
    "title": "Decorator Pattern",
    "slug": "decorator-pattern",
    "description": "To dynamically add new functionality to class instances.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To dynamically add new functionality to class instances.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/decorator-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Booking</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nInterface for all the booking options.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Decorator;\n\ninterface Booking\n{\n    public function calculatePrice(): int;\n    public function getDescription(): string;\n}\n\n</code></pre>\n<p><b>DoubleRoomBooking</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe base option, other options will be dynamically added to this based on requirements.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Decorator;\n\nclass DoubleRoomBooking implements Booking\n{\n    public function calculatePrice(): int\n    {\n        return 40;\n    }\n\n    public function getDescription(): string\n    {\n        return 'double room';\n    }\n}\n\n</code></pre>\n<p><b>BookingDecorator</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nSub options extend this abstract BookingDecorator, which takes a class which implements the Booking Interface as a construct parameter.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Decorator;\n\nabstract class BookingDecorator implements Booking\n{\n    public function __construct(protected Booking $booking)\n    {\n\n    }\n}\n\n</code></pre>\n<p><b>ExtraBed</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nExtra Bed is a sub option which can potentially be attached to the base option. It extends the abstract BookingDecorator.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Decorator;\n\nclass ExtraBed extends BookingDecorator\n{\n    private const PRICE = 30;\n\n    public function calculatePrice(): int\n    {\n        return $this->booking->calculatePrice() + self::PRICE;\n    }\n\n    public function getDescription(): string\n    {\n        return $this->booking->getDescription() . ' with extra bed';\n    }\n}\n\n</code></pre>\n<p><b>WiFi</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nWiFi is a sub option which can potentially be attached to the base option. It extends the abstract BookingDecorator.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Decorator;\n\nclass WiFi extends BookingDecorator\n{\n    private const PRICE = 2;\n\n    public function calculatePrice(): int\n    {\n        return $this->booking->calculatePrice() + self::PRICE;\n    }\n\n    public function getDescription(): string\n    {\n        return $this->booking->getDescription() . ' with wifi';\n    }\n}\n\n</code></pre>\n<p><b>Tests</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nSome examples of how to implement this pattern\n</div>\n<pre><code class=\"language-php\">\n// Customer wants a double room. Price is £40 and the description is ‘double room’.\npublic function testCanCalculatePriceForBasicDoubleRoomBooking()\n{\n    $booking = new DoubleRoomBooking();\n\n    $this->assertSame(40, $booking->calculatePrice());\n    $this->assertSame('double room', $booking->getDescription());\n}\n\n// Customer wants a double room with Wifi. Price is now £42 with the description ‘double room with wifi’.\npublic function testCanCalculatePriceForDoubleRoomBookingWithWiFi()\n{\n    $booking = new DoubleRoomBooking();\n    $booking = new WiFi($booking);\n\n    $this->assertSame(42, $booking->calculatePrice());\n    $this->assertSame('double room with wifi', $booking->getDescription());\n}\n\n// Customer wants a double room with Wifi and an extra bed. Price is now £72 with the description ‘double room with wifi with extra bed’.\npublic function testCanCalculatePriceForDoubleRoomBookingWithWiFiAndExtraBed()\n{\n    $booking = new DoubleRoomBooking();\n    $booking = new WiFi($booking);\n    $booking = new ExtraBed($booking);\n\n    $this->assertSame(72, $booking->calculatePrice());\n    $this->assertSame('double room with wifi with extra bed', $booking->getDescription());\n}\n\n</code></pre>",
    "active": 1,
    "position": 4,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 38,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Dependency Injection",
    "meta_description": "To implement a loosely coupled architecture in order to get better testable, maintainable and extendable code.",
    "title": "Dependency Injection",
    "slug": "dependency-injection-pattern",
    "description": "To implement a loosely coupled architecture in order to get better testable, maintainable and extendable code.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To implement a loosely coupled architecture in order to get better testable, maintainable and extendable code.</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>The Doctrine2 ORM uses dependency injection e.g. for configuration that is injected into a Connection object. For testing purposes, one can easily create a mock object of the configuration and inject that into the Connection object </li>\n<li>Many frameworks already have containers for DI that create objects via a configuration array and inject them where needed (i.e. in Controllers)</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/dependency-injection-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>DatabaseConfiguration</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe configuration class - ideally this needs to implement an Interface with the Interface being type hinted on the DatabaseConnection class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\DependencyInjection;\n\nclass DatabaseConfiguration\n{\n    public function __construct(\n        private string $host,\n        private int $port,\n        private string $username,\n        private string $password\n    ) { }\n\n    public function getHost(): string\n    {\n        return $this->host;\n    }\n\n    public function getPort(): int\n    {\n        return $this->port;\n    }\n\n    public function getUsername(): string\n    {\n        return $this->username;\n    }\n\n    public function getPassword(): string\n    {\n        return $this->password;\n    }\n}\n\n</code></pre>\n<p><b>DatabaseConnection</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAll you need to look at here really is this line:<br/>\n<strong>public function __construct(private DatabaseConfiguration $configuration)</strong>\n<br/><br/>\nThe database configuration is being injected into the database connection class, which means we could potentially pass in a different configuration if needed (which is useful for testing etc). If we didn’t do this, we’d have to amend the DatabaseConnection some other way, and it can get messy!\n<br/><br/>\nNote - we're using PHP 8 property promotion.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\DependencyInjection;\n\nclass DatabaseConnection\n{\n    public function __construct(private DatabaseConfiguration $configuration)\n    {\n    }\n\n    public function getDsn(): string\n    {\n        // this is just for the sake of demonstration, not a real DSN\n        // notice that only the injected config is used here, so there is\n        // a real separation of concerns here\n\n        return sprintf(\n            '%s:%s@%s:%d',\n            $this->configuration->getUsername(),\n            $this->configuration->getPassword(),\n            $this->configuration->getHost(),\n            $this->configuration->getPort()\n        );\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 5,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 39,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Facade Pattern",
    "meta_description": "Grouping code together to reduce complexity; making it simple and easier to understand.",
    "title": "Facade Pattern",
    "slug": "facade-pattern",
    "description": "Grouping code together to reduce complexity; making it simple and easier to understand.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>The primary goal of a Facade Pattern is not to avoid you having to read the manual of a complex API. It's only a side-effect. The first goal is to reduce coupling and follow the Law of Demeter.</p>\n<p>A Facade is meant to decouple a client and a sub-system by embedding many (but sometimes just one) interface, and of course to reduce complexity.</p>\n<p>A facade does not forbid you the access to the sub-system</p>\n<p>You can (you should) have multiple facades for one sub-system</p>\n<p>That's why a good facade has no new in it. If there are multiple creations for each method, it is not a Facade, it's a Builder or a [Abstract|Static|Simple] Factory [Method].</p>\n<p>The best facade has no new and a constructor with interface-type-hinted parameters. If you need creation of new instances, use a Factory as argument.</p>\n<p><strong>The above may sound complicated but essentially all a Facade is doing is grouping code together so if you need to call it, it's simple and easier to understand whats going on, i.e:</strong></p>\n<p>Adding this to code:</p>\n<pre><code class=\"language-php\">\n$this->eatBreakfast();\n\n</code></pre>\n<p>Beats this (this would be encapsulated inside eatBreakfast()):</p>\n<pre><code class=\"language-php\">\n$this->openFridge();\n$this->getSausages();\n$this->getEggs();\n$this->getBacon();\n$this->cook();\n$this->openMouth();\n$this->swallow();\n\n</code></pre>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/facade-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Bios</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOur Bios Interface (Type hinted and passed into the Facade class)\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Facade;\n\ninterface Bios\n{\n    public function execute();\n    public function waitForKeyPress();\n    public function launch(OperatingSystem $os);\n    public function powerDown();\n}\n\n</code></pre>\n<p><b>Operating System</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nOur OperatingSystem Interface (Type hinted and passed into the Facade class)\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Facade;\n\ninterface OperatingSystem\n{\n    public function halt();\n\n    public function getName(): string;\n}\n\n</code></pre>\n<p><b>Facade</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNote - uses PHP 8 property promotion.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Facade;\n\nclass Facade\n{\n    public function __construct(private Bios $bios, private OperatingSystem $os)\n    {\n    }\n\n    public function turnOn()\n    {\n        $this->bios->execute();\n        $this->bios->waitForKeyPress();\n        $this->bios->launch($this->os);\n    }\n\n    public function turnOff()\n    {\n        $this->os->halt();\n        $this->bios->powerDown();\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 6,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 40,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Fluent Interface",
    "meta_description": "To write code that is easy readable just like sentences in a natural language (like English).",
    "title": "Fluent Interfaces",
    "slug": "fluent-interface-pattern",
    "description": "To write code that is easy readable just like sentences in a natural language (like English).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To write code that is easy readable just like sentences in a natural language (like English).</p>\n<div class=\"subheading mb-3\">\nExamples\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nExamples of how the design pattern can be used\n</div>\n<ul>\n<li>A query builder which works something like that example class below. </li>\n<li>PHPUnit uses fluent interfaces to build mock objects.</li>\n</ul>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/fluent-interface-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Fluent Interface</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThis class is a Fluent Interface and reads like English.\n\nCalled something like…<br/>\n\n<strong>$query = new Sql;<br/>echo $query->select(['stuff'])->from('somewhere')->where('id = 2');</strong>\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\FluentInterface;\n\nclass Sql implements \\Stringable\n{\n    private array $fields = [];\n    private array $from = [];\n    private array $where = [];\n\n    public function select(array $fields): Sql\n    {\n        $this->fields = $fields;\n\n        return $this;\n    }\n\n    public function from(string $table, string $alias): Sql\n    {\n        $this->from[] = $table . ' AS ' . $alias;\n\n        return $this;\n    }\n\n    public function where(string $condition): Sql\n    {\n        $this->where[] = $condition;\n\n        return $this;\n    }\n\n    public function __toString(): string\n    {\n        return sprintf(\n            'SELECT %s FROM %s WHERE %s',\n            join(', ', $this->fields),\n            join(', ', $this->from),\n            join(' AND ', $this->where)\n        );\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 7,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 41,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Flyweight Pattern",
    "meta_description": "To minimise memory usage, a Flyweight shares as much as possible memory with similar objects. It is needed when a large amount of objects is used that don't differ much in state.",
    "title": "Flyweight Pattern",
    "slug": "flyweight-pattern",
    "description": "To minimise memory usage, a Flyweight shares as much as possible memory with similar objects. It is needed when a large amount of objects is used that don't differ much in state.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To minimise memory usage, a Flyweight shares as much as possible memory with similar objects. It is needed when a large amount of objects is used that don't differ much in state. A common practice is to hold state in external data structures and pass them to the flyweight object when needed.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/flyweight-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Text</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nInterface that all flyweight objects must implement.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Flyweight;\n\n/**\n* This is the interface that all flyweights need to implement\n*/ \ninterface Text\n{\n  public function render(string $extrinsicState): string;\n}\n\n</code></pre>\n<p><b>TextFactory</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThis factory manages shared flyweights. The factory takes care of instanitating the flyweight objects.<br/><br/>\nIn this example we either create a new Word or Character object based on the length of the string passed into the Factory create method, i.e TextFactory::create('stu') would create and return a Word class.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Flyweight;\n\nuse Countable;\n\n/**\n* A factory manages shared flyweights. Clients should not instantiate them directly,\n* but let the factory take care of returning existing objects or creating new ones.\n*/\n  class TextFactory implements Countable\n  {\n  /**\n   * @var Text[]\n   */\n  private array $charPool = [];\n\n  public function get(string $name): Text\n  {\n      if (!isset($this->charPool[$name])) {\n          $this->charPool[$name] = $this->create($name);\n      }\n\n      return $this->charPool[$name];\n  }\n\n  private function create(string $name): Text\n  {\n      if (strlen($name) == 1) {\n          return new Character($name);\n      } else {\n          return new Word($name);\n      }\n  }\n\n  public function count(): int\n  {\n      return count($this->charPool);\n  }\n}\n\n</code></pre>\n<p><b>Word</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNote - this uses PHP 8 constructor property promotion.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Flyweight;\n\nclass Word implements Text\n{\n    public function __construct(private string $name) { }\n\n    public function render(string $extrinsicState): string\n    {\n        return sprintf('Word %s with font %s', $this->name, $extrinsicState);\n    }\n}\n\n</code></pre>\n<p><b>Character</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nNote - this uses PHP 8 constructor property promotion.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Flyweight;\n\n/**\n* Implements the flyweight interface and adds storage for intrinsic state, if any.\n* Instances of concrete flyweights are shared by means of a factory.\n*/\nclass Character implements Text\n{\n    /**\n    * Any state stored by the concrete flyweight must be independent of its context.\n    * For flyweights representing characters, this is usually the corresponding character code.\n    */\n    * \n    public function __construct(private string $name) { }\n\n    public function render(string $extrinsicState): string\n    {\n         // Clients supply the context-dependent information that the flyweight needs to draw itself\n         // For flyweights representing characters, extrinsic state usually contains e.g. the font\n         return sprintf('Character %s with font %s', $this->name, $extrinsicState);\n     }\n}\n\n</code></pre>\n<p>In the code above, we create the flyweight classes via a Factory, then pass in the font at a later stage (when its needed). i.e</p>\n<pre><code class=\"language-php\">\nTextFactory::create('Stu')->render('TIMES_NEW_ROMAN');\n// Outputs 'Word Stu with font TIMES_NEW_ROMAN'\n\nTextFactory::create('S')->render('TIMES_NEW_ROMAN');\n// Outputs 'Character S with font TIMES_NEW_ROMAN'\n\n</code></pre>",
    "active": 1,
    "position": 8,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 42,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Proxy Pattern",
    "meta_description": "Create an interface to anything that is expensive or impossible to duplicate.",
    "title": "Proxy Pattern",
    "slug": "proxy-pattern",
    "description": "Create an interface to anything that is expensive or impossible to duplicate.",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>Create an interface to anything that is expensive or impossible to duplicate.</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/proxy-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>BankAccountProxy</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nIf you have an expensive function (in the example below getBalance) we can adjust the code so that we only call the expensive function when it is really needed. You could only call the expensive method if what you need isn’t already set or it’s already in cache (just examples!).\n<br/><br/>\nThe proxy class extends the ‘heavy' class and overrides the functionality (calling the parent instance of it when required).\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Proxy;\n\nclass BankAccountProxy extends HeavyBankAccount implements BankAccount\n{\n    private ?int $balance = null;\n\n    public function getBalance(): int\n    {\n        // because calculating balance is so expensive,\n        // the usage of BankAccount::getBalance() is delayed until it really is needed\n        // and will not be calculated again for this instance\n\n        if ($this->balance === null) {\n            $this->balance = parent::getBalance();\n        }\n\n        return $this->balance;\n    }\n}\n</code></pre>\n<p><b>BankAccount</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nThe common interface - ensuring both classes have the same methods.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Proxy;\n\ninterface BankAccount\n{\n    public function deposit(int $amount);\n\n    public function getBalance(): int;\n}\n\n</code></pre>\n<p><b>HeavyBankAccount</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nAnd finally, the expensive functionality is located here and only called when needed.\n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Proxy;\n\nclass HeavyBankAccount implements BankAccount\n{\n    private array $transactions = [];\n\n    public function deposit(int $amount)\n    {\n        $this->transactions[] = $amount;\n    }\n\n    public function getBalance(): int\n    {\n        // this is the heavy part, imagine all the transactions even from\n        // years and decades ago must be fetched from a database or web service\n        // and the balance must be calculated from it\n\n        return array_sum($this->transactions);\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 9,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 43,
    "user_id": 1,
    "category_id": 6,
    "meta_title": "Design Patterns - Registry Pattern",
    "meta_description": "To implement a central storage for objects often used throughout the application, is typically implemented using an abstract class with only static methods (or using the Singleton pattern).",
    "title": "Registry Pattern",
    "slug": "registry-pattern",
    "description": "To implement a central storage for objects often used throughout the application, is typically implemented using an abstract class with only static methods (or using the Singleton pattern).",
    "content": "<div class=\"subheading mb-3\">\nPurpose\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nThe purpose of the design pattern\n</div>\n<p>To implement a central storage for objects often used throughout the application, is typically implemented using an abstract class with only static methods (or using the Singleton pattern).</p>\n<div class=\"subheading mb-3\">\nUML\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nUML design pattern diagram\n</div>\n<img src=\"/images/patterns/registry-pattern.png\" title=\"UML diagram\"/>\n<p><br/></p>\n<div class=\"subheading mb-3\">\nCode\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\nCode snippets\n</div>\n<p><b>Registry</b></p>\n<div class=\"alert alert-info\" role=\"alert\">\nEssentially gives the ability to create a registry of services via a static getter (parameter type hinted to an interface) and setter, which can be used in whichever class extends it. \n</div>\n<pre><code class=\"language-php\">\nnamespace DesignPatterns\\Structural\\Registry;\n\nuse InvalidArgumentException;\n\nabstract class Registry\n{\n    public const LOGGER = 'logger';\n\n    /**\n     * @var Service[]\n     */\n    private static array $services = [];\n\n    private static array $allowedKeys = [\n        self::LOGGER,\n    ];\n\n    final public static function set(string $key, Service $value)\n    {\n        if (!in_array($key, self::$allowedKeys)) {\n            throw new InvalidArgumentException('Invalid key given');\n        }\n\n        self::$services[$key] = $value;\n    }\n\n    final public static function get(string $key): Service\n    {\n        if (!in_array($key, self::$allowedKeys) || !isset(self::$services[$key])) {\n            throw new InvalidArgumentException('Invalid key given');\n        }\n\n        return self::$services[$key];\n    }\n}\n\n</code></pre>",
    "active": 1,
    "position": 10,
    "created_at": "2022-08-02 16:07:15",
    "updated_at": "2022-10-02 16:07:15"
  },
  {
    "id": 45,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Design Patterns - Overview",
    "meta_description": "A design pattern is a general, reusable solution to common occurring problems within a given context in software engineering.",
    "title": "Design Patterns - Overview",
    "slug": "design-patterns-overview",
    "description": "A design pattern is a general, reusable solution to common occurring problems within a given context in software engineering.",
    "content": "<div class=\"alert alert-info\" role=\"alert\">\r\nCheck out <a href=\"/article/5/solid-principles\">SOLID principles</a> too! A popular set of design principles used in OOP.\r\n</div>\r\n\r\n<div class=\"subheading mb-3\">Overview</div>\r\n<p>Back in 1994 a software engineering book describing software patterns was published. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (aka the Gang of Four). It has been influential to the field of software engineering and is regarded as an important source for object-oriented design theory and practice.</p>\r\n<p>A common theme to the design patterns described are:</p>\r\n<ul>\r\n<li>Program to an interface, not an implementation.</li>\r\n<li><a href=\"/article/4/composition-over-inheritance\">Favour composition over inheritance</a>.</li>\r\n</ul>\r\n\r\n<p>Inheritance is powerful but if you over-use it, you can run in problems, such as the <a href=\"/article/4/composition-over-inheritance\">coffee shop problem</a>.</p>\r\n\r\n<p><strong>Why code to an interface?</strong> Well, the client remains unaware of the specific objects they use, as long as it adheres to an interface, you can be flexible, in the sense that an interface forces classes to adhere to them (so they must have the defined method signatures from the interface).</p> \r\n\r\n<p>Programming to an interface allows for <strong>dynamic binding</strong> (specifying implementation at run-time) and <strong>polymorphism</strong> (several objects which implement the same interface).</p>\r\n\r\n<p>Design patterns described in the book can be categorised into either <strong>Behavioural, Structural or Creational</strong>.</p>\r\n\r\n<div class=\"subheading mb-3\">Behavioural</div>\r\n<p>Most of these design patterns are specifically concerned with communication between objects.</p>\r\n\r\n<ul>\r\n<li><a href=\"/article/13/chain-of-responsibility-pattern\">Chain of responsibility</a>: Create a chain of handlers, each handler decides whether to pass the request onto the next handler or to 'handle' the request itself.</li>\r\n<li><a href=\"/article/44/design-patterns-overview\">Command</a>: An invoker accepts a command object via composition and executes it.</li>\r\n<li><a href=\"/article/15/interpreter-pattern\">Interpreter</a>: Say you've got to define several logical expressions, rather than hardcoding, you'd use Interpreter objects which define the expression.</li>\r\n<li><a href=\"/article/16/iterator-pattern\">Iterator</a>: Accesses the elements of an object sequentially without exposing its underlying representation.</li>\r\n<li><a href=\"/article/17/mediator-pattern\">Mediator</a>: A mediator object has access to two (or more) object properties and methods, utilising and combining methods to create new ones. Objects are injected via composition.</li>\r\n<li><a href=\"/article/18/memento-pattern\">Memento</a>: Provides the ability to restore an object to its previous state by saving a snapshot of an object.</li>\r\n<li><a href=\"/article/20/observer-pattern\">Observer</a>: Observer objects can be attached to a subject object, whenever a subject 'changes', the observer classes attached are triggered.</li>\r\n<li><a href=\"/article/22/state-pattern\">State</a> A 'context' object is injected with a state object, when the 'context' object changes the state, the state object changes, thus changing the behaviour of the 'context' object.</li>\r\n<li><a href=\"/article/23/strategy-pattern\">Strategy</a>: A 'strategy' object is injected at run-time which executes a method, but the behaviour depends on the object injected.</li>\r\n<li><strong>Template method</strong>: Defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behaviour. <strong>Easiest pattern ever - simply extend an abstract class to eliminate duplicate code across the sub classes</strong>.</li>\r\n<li><a href=\"/article/24/visitor-pattern\">Visitor</a>: An object accepts another object as a 'visitor', the 'visitor' gains access to this objects methods and properties.</li>\r\n</ul>\r\n\r\n<div class=\"subheading mb-3\">Structural</div>\r\n<p>These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.</p>\r\n\r\n<ul>\r\n<li><a href=\"/article/33/adapter-pattern\">Adapter</a>: Allows classes with incompatible interfaces to work together by wrapping its own interface around that of an already existing class.</li>\r\n<li><a href=\"/article/34/bridge-pattern\">Bridge</a>: An object which doesn't need to be concerned with its own implementation can be injected with an object which handles this.</li>\r\n<li><a href=\"/article/35/composite-pattern\">Composite</a>: Composite objects can be attached to other composite objects, meaning a potential tree like structure of execution can be created .</li>\r\n<li><a href=\"/article/37/decorator-pattern\">Decorator</a>: Dynamically adds/overrides behaviour in an existing method of an object.</li>\r\n<li><a href=\"/article/39/facade-pattern\">Facade</a>: Provides a simplified interface to a large body of code.</li>\r\n<li><a href=\"/article/41/flyweight-pattern\">Flyweight</a>: Reduces the cost of creating and manipulating a large number of similar objects.</li>\r\n<li><a href=\"/article/42/proxy-pattern\">Proxy</a>: Extend a parent class, then call the parent version of a method within the child method and adjust where necessary.</li>\r\n</ul>\r\n\r\n<div class=\"subheading mb-3\">Creational</div>\r\n<p>These patterns create objects dynamically rather than instantiating them directly. This gives the code more flexibility in deciding which objects need to be created for a given case.</p>\r\n\r\n<ul>\r\n<li><a href=\"/article/25/abstract-factory-pattern\">Abstract factory</a>: For when you need to group object factories that have a common theme.</li>\r\n<li><a href=\"/article/26/builder-pattern\">Builder</a>: Constructs complex objects rather than only returning an object.</li>\r\n<li><a href=\"/article/30/simple-factory-pattern\">Factory method</a>: Creates objects without specifying the exact class to create.</li>\r\n<li><a href=\"/article/32/static-factory-pattern\">Static Factory</a>: Creates objects via a static method with parameter/s.</li>\r\n<li><a href=\"/article/29/prototype-pattern\">Prototype</a>: Creates objects by cloning an existing object.</li>\r\n<li><a href=\"/article/31/singleton-patternxfD\">Singleton</a>: Restricts object creation for a class to only one instance.</li>\r\n</ul>",
    "active": 1,
    "position": 0,
    "created_at": "2022-10-10 19:24:41",
    "updated_at": "2022-10-11 05:28:15"
  },
  {
    "id": 46,
    "user_id": 1,
    "category_id": 8,
    "meta_title": "Hexagonal Architecture",
    "meta_description": "Also known as the Ports and Adapters architecture. This architecture clearly separates core logic from the input and output infrastructure, dividing the system into loosely-coupled interchangeable components.",
    "title": "Hexagonal Architecture",
    "slug": "hexagonal-architecture",
    "description": "Also known as the Ports and Adapters architecture. This architecture clearly separates core logic from the input and output infrastructure, dividing the system into loosely-coupled interchangeable components. Throughout the years, it grew in popularity to become one of the most widely recognised types of software architecture.",
    "content": "<div class=\"subheading mb-3\">What is Hexagonal Architecture?</div>\r\n<p>Introduced by Alistair Cockburn in 2005 as an alternative to the traditional layered architecture. He states this architectural pattern will:</p>\r\n<p><i><b>\"Allow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases.\"</b></i></p>\r\n\r\n<div class=\"subheading mb-3\">The Principle</div>\r\n<p><b>Domain layer is the heart of the software</b>, it handles the business logic of the system. The goal is to have domain code completely technology-agnostic. It doesn't need to know about the system interactions or implementations (databases, GUIs, file systems, web APIs, CLI etc) and as such should not hold any references to frameworks, technologies and real-world devices.</p>\r\n\r\n<p>Also known as the Adapters and Ports architecture. <b>External sources are adapted by classes which adhere to interfaces (ports)</b>. The adapters are used to transport information (e.g a database or a file system) to and from the domain or use the domain to achieve a goal.</p>\r\n<br/>\r\n<img src=\"/images/hex1.png\" title=\"Hex1\" style=\"max-width:100%\"/>\r\n\r\n<div class=\"subheading mb-3\">Domain Layer</div>\r\n<p>The Domain layer is protected by a boundary (command, command bus and handler) within the Application layer which sits outside of the Domain layer. Say you want a simple app which creates posts. You'd create a Post model (aka an entity object) in your domain namespace.</p>\r\n\r\n<pre><code class=\"language-php\">\r\nclass Post\r\n{\r\n    public int $id;\r\n    public string $title;\r\n    public string $contents;\r\n}\r\n\r\n</code></pre>\r\n\r\n<p>Once we've done that, we'll need a define an interface to retrieve post instances. Our domain does not care where to store our data, it just cares about getting the data.</p>\r\n\r\n<pre><code class=\"language-php\">\r\ninterface PostRepositoryInterface\r\n{\r\n    public function create(Post $post);\r\n}\r\n\r\n</code></pre>\r\n<br/>\r\n<div class=\"subheading mb-3\">Application Layer</div>\r\n<p>The Application Layer sits outside of the Domain layer. It manages events from outside layers and the inner core (Domain layer).</p>\r\n<p>Within the Application layer we'll create a command which creates a post, along with its interface. It's important to note that the command is only the message detail, it implies change and expresses intention. The command handler uses the command.</p>\r\n<pre><code class=\"language-php\">\r\ninterface CommandInterface \r\n{\r\n    public function getTitle(): string;\r\n    public function getContents(): string;\r\n}\r\n\r\nclass CreatePostCommand implements CommandInterface\r\n{\r\n    public function __construct(private string $title, private string $contents)\r\n    {\r\n        \r\n    }\r\n\r\n    public function getTitle(): string\r\n    {\r\n        return $this->title;\r\n    }\r\n\r\n    public function getContents(): string\r\n    {\r\n        return $this->contents;\r\n    }\r\n}\r\n\r\n</code></pre>\r\n<br/>\r\n<p>Next up, we'll create a handler and its interface.</p>\r\n<pre><code class=\"language-php\">\r\ninterface CommandHandlerInterface\r\n{\r\n    public function handle(CommandInterface $command): string;\r\n}\r\n\r\nclass CreatePostHandler implements CommandHandlerInterface\r\n{\r\n    public function __construct(private PostRepositoryInterface $postRepository)\r\n    {\r\n\r\n    }\r\n\r\n    public function handle(CommandInterface $command): string\r\n    {\r\n        $post = new Post;\r\n        $post->id = uniqid();\r\n        $post->title = $command->getTitle();\r\n        $post->contents = $command->getContents();\r\n\r\n        $this->postRepository->create($post);\r\n\r\n        return $this->title;\r\n    }\r\n}\r\n\r\n</code></pre>\r\n<br/>\r\n<p>FInally, we've got a command bus. A command bus takes a command and matches it to a handler.</p>\r\n<pre><code class=\"language-php\">\r\ninterface CommandBusInterface\r\n{\r\n    public function execute(CommandInterface $command): string;\r\n}\r\n\r\nclass SynchronousCommandBus implements CommandBusInterface\r\n{\r\n    private array $handlers = [];\r\n\r\n    public function execute(CommandInterface $command): string\r\n    {\r\n        $commandName = get_class($command);\r\n\r\n        // We'll need to check if the Command that's given is actually registered to be handled here.\r\n        if (!array_key_exists($commandName, $this->handlers)) {\r\n            throw new Exception(\"{$commandName} is not supported by SynchronousCommandBus\");\r\n        }\r\n\r\n        return $this->handlers[$commandName]->handle($command);\r\n    }\r\n\r\n    // Now we need a function to register the handlers\r\n    public function register(string $commandName, CommandHandlerInterface $handler)\r\n    {\r\n        $this->handlers[$commandName] = $handler;\r\n\r\n        return $this;\r\n    }\r\n\r\n}\r\n\r\n</code></pre>\r\n<br/>\r\n<div class=\"subheading mb-3\">Adapter & Port example</div>\r\n<p><b>PostRepository</b> is an Adapter. <b>PostRepositoryInterface</b> is the port. The adapter must adhere to the port. In theory several adapters could implement the same port (i.e various database services). The advantage of using this architecture means we can easily switch out <b>PostRepository</b> with another adapter which implements the <b>PostRepositoryInterface</b> interface (port). All this without changing our Domain code at all.</p>\r\n\r\n<pre><code class=\"language-php\">\r\nclass PostRepository implements PostRepositoryInterface\r\n{\r\n    public $posts = [];\r\n\r\n    public function create(Post $post)\r\n    {\r\n        $this->posts = $post;\r\n\r\n        // Obviously, this is for testing purposes only but it could go off to a database here or another web service.\r\n        echo \"Post with id {$post->id} was created\";\r\n    }\r\n\r\n}\r\n\r\n</code></pre>\r\n<br/>\r\n<div class=\"subheading mb-3\">Test Code</div>\r\n\r\n<pre><code class=\"language-php\">\r\n$postRepository = new PostRepository; // Example of an Adapter\r\n\r\n// Application Layer (contains the Domain layer boundary of the command bus, handler and command)\r\n$commandBus = new SynchronousCommandBus();\r\n$commandHandler = new CreatePostHandler($postRepository); // Dependency Inject the Adapter\r\n$commandBus->register(CreatePostCommand::class, $commandHandler);\r\n\r\n$command = new CreatePostCommand(\r\n    \"This is a post title\",\r\n    \"And this is the content\"\r\n);\r\n\r\n// Command bus executes the commands handler.\r\n// The handler (in this example) accesses the Domain layer and uses the injected Adapter dependency.\r\n$commandBus->execute($command); \r\n\r\n</code></pre>",
    "active": 1,
    "position": 0,
    "created_at": "2023-01-14 21:10:04",
    "updated_at": "2023-01-15 09:25:42"
  },
  {
    "id": 47,
    "user_id": 1,
    "category_id": 1,
    "meta_title": "Go: Value vs Reference types.",
    "meta_description": "Go: Value vs Reference types.",
    "title": "Go: Value vs Reference types.",
    "slug": "domain-driven-design",
    "description": "Say, you’re passing a variable to a function and you would like that function to update the given variable. This depends on the data type you’re passing in.",
    "content": "<p><b>Value types</b> (int, float, string, bool and structs) create a copy of the variable. If you adjust this copied variable within your function you won’t be updating the original. To update the original you’ll have to use a pointer.</p>\r\n\r\n<p><b>Reference types</b> (slices, maps, channels, pointers and functions) operate differently because they're not stored directly where they’re created. If you passed a variable to a function, a copy is made, however, like the original variable, this copy is already acting like a pointer to a value stored elsewhere.</p>\r\n\r\n<p>E.g - a slice contains a reference to the actual lying list of records.</p>",
    "active": 1,
    "position": 0,
    "created_at": "2023-01-28 22:52:02",
    "updated_at": "2023-06-28 13:42:27"
  }
]