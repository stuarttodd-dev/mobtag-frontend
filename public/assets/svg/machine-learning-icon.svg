<svg xmlns="http://www.w3.org/2000/svg" width="24.806" height="24.173" viewBox="0 0 24.806 24.173"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script>
  <path id="machine-learning-icon" d="M25.649,12.559a4.161,4.161,0,0,0-1.491-3.2A4.189,4.189,0,0,0,20.505,4.36a4.184,4.184,0,0,0-7.259-.8,4.184,4.184,0,0,0-7.259.8A4.189,4.189,0,0,0,2.334,9.355,4.189,4.189,0,0,0,1.861,15.3a5.207,5.207,0,0,0,4.187,8.3h.015a4.23,4.23,0,0,0,1.26,1.543,4.181,4.181,0,0,0,5.923-.912,4.181,4.181,0,0,0,5.923.912,4.231,4.231,0,0,0,1.26-1.543,5.212,5.212,0,0,0,5.22-5.206A5.16,5.16,0,0,0,24.631,15.3a4.159,4.159,0,0,0,1.018-2.738ZM9.742,24.392A2.642,2.642,0,0,1,7.258,22.61h0a2.6,2.6,0,0,1-.139-.84,2.627,2.627,0,0,1,.6-1.669.782.782,0,0,0-1.205-1,4.193,4.193,0,0,0-.958,2.665c0,.072,0,.145.006.216a3.64,3.64,0,0,1-2.326-6.047h0a3.633,3.633,0,0,1,2.325-1.195,4.194,4.194,0,0,0,.2,1.515.782.782,0,0,0,1.487-.486,2.625,2.625,0,0,1,1.678-3.308.782.782,0,1,0-.486-1.487,4.3,4.3,0,0,0-.519.209,2.044,2.044,0,0,1,.6-2.316.782.782,0,1,0-1-1.2,3.609,3.609,0,0,0-.881,4.477,4.185,4.185,0,0,0-.634.921c-.016.031-.03.064-.045.095H5.95a5.173,5.173,0,0,0-3.072,1.006,2.621,2.621,0,0,1,.669-3.857.782.782,0,0,0,.323-.927,2.623,2.623,0,0,1,2.47-3.5l.113,0A.781.781,0,0,0,7.208,5.3a2.622,2.622,0,0,1,5.156.671v15.8a2.625,2.625,0,0,1-2.622,2.623ZM23.416,14.166a5.18,5.18,0,0,0-3.072-1.006h-.016c-.015-.031-.029-.064-.045-.095a4.233,4.233,0,0,0-.634-.921,3.609,3.609,0,0,0-.881-4.477.782.782,0,1,0-1,1.2,2.044,2.044,0,0,1,.6,2.316,4.3,4.3,0,0,0-.519-.209.782.782,0,0,0-.486,1.487,2.625,2.625,0,0,1,1.678,3.308.782.782,0,1,0,1.487.486,4.172,4.172,0,0,0,.2-1.515,3.627,3.627,0,0,1,2.218,1.081h0a3.639,3.639,0,0,1-2.219,6.16c0-.071.006-.144.006-.216A4.191,4.191,0,0,0,19.78,19.1a.782.782,0,1,0-1.205,1,2.625,2.625,0,0,1,.472,2.476v0c-.012.036-.024.071-.037.107a2.623,2.623,0,0,1-5.08-.917V5.971A2.623,2.623,0,0,1,19.086,5.3a.781.781,0,0,0,.782.582l.088,0A2.625,2.625,0,0,1,22.578,8.5a2.6,2.6,0,0,1-.153.882.782.782,0,0,0,.323.927,2.621,2.621,0,0,1,.668,3.858Z" transform="translate(-0.843 -1.809)" fill="#93c434"/>
</svg>