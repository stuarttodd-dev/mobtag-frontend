<svg xmlns="http://www.w3.org/2000/svg" id="golang" width="82.551" height="30.842" viewBox="0 0 82.551 30.842"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script>
  <g id="Group_2037" data-name="Group 2037" transform="translate(6.069 7.851)">
    <g id="Group_2036" data-name="Group 2036">
      <g id="Group_2035" data-name="Group 2035">
        <path id="Path_55" data-name="Path 55" d="M15.261,20.987c-.161,0-.2-.08-.121-.2l.844-1.085a.576.576,0,0,1,.442-.2H30.775c.161,0,.2.121.121.241l-.683,1.045a.612.612,0,0,1-.4.241Z" transform="translate(-15.1 -19.5)" fill="#fff"/>
      </g>
    </g>
  </g>
  <g id="Group_2040" data-name="Group 2040" transform="translate(0 11.549)">
    <g id="Group_2039" data-name="Group 2039">
      <g id="Group_2038" data-name="Group 2038">
        <path id="Path_56" data-name="Path 56" d="M.161,30.187c-.161,0-.2-.08-.121-.2L.884,28.9a.576.576,0,0,1,.442-.2H19.654a.185.185,0,0,1,.2.241l-.322.965a.352.352,0,0,1-.362.241Z" transform="translate(0 -28.7)" fill="#fff"/>
      </g>
    </g>
  </g>
  <g id="Group_2043" data-name="Group 2043" transform="translate(9.727 15.247)">
    <g id="Group_2042" data-name="Group 2042">
      <g id="Group_2041" data-name="Group 2041">
        <path id="Path_57" data-name="Path 57" d="M24.361,39.387c-.161,0-.2-.121-.121-.241l.563-1a.533.533,0,0,1,.4-.241h8.039c.161,0,.241.121.241.281l-.08.965a.3.3,0,0,1-.281.281Z" transform="translate(-24.2 -37.9)" fill="#fff"/>
      </g>
    </g>
  </g>
  <g id="Group_2047" data-name="Group 2047" transform="translate(21.911 0)">
    <g id="CXHf1q_3_">
      <g id="Group_2046" data-name="Group 2046">
        <g id="Group_2044" data-name="Group 2044">
          <path id="Path_58" data-name="Path 58" d="M84.211,8.581c-2.532.643-4.26,1.125-6.752,1.768-.6.161-.643.2-1.166-.4A5.38,5.38,0,0,0,74.4,8.42a6.988,6.988,0,0,0-7.275.6,8.548,8.548,0,0,0-4.1,7.637,6.3,6.3,0,0,0,5.426,6.31,7.418,7.418,0,0,0,6.833-2.653c.362-.442.683-.924,1.085-1.487H68.617c-.844,0-1.045-.523-.764-1.206.523-1.246,1.487-3.336,2.05-4.381a1.085,1.085,0,0,1,1-.643h14.63c-.08,1.085-.08,2.17-.241,3.256A17.141,17.141,0,0,1,82,23.733a16.743,16.743,0,0,1-11.455,6.833,14.237,14.237,0,0,1-10.812-2.653,12.625,12.625,0,0,1-5.1-8.923A15.775,15.775,0,0,1,58.046,7.214,17.836,17.836,0,0,1,69.3.261,13.851,13.851,0,0,1,79.951,2.23,12.6,12.6,0,0,1,84.613,7.9C84.855,8.259,84.694,8.46,84.211,8.581Z" transform="translate(-54.515 0.034)" fill="#fff"/>
        </g>
        <g id="Group_2045" data-name="Group 2045" transform="translate(28.65 0.372)">
          <path id="Path_59" data-name="Path 59" d="M140.147,31.361a15.078,15.078,0,0,1-9.807-3.537A12.605,12.605,0,0,1,126,20.067a15.343,15.343,0,0,1,3.256-12.138,16.849,16.849,0,0,1,11.254-6.712c4.1-.723,7.958-.322,11.455,2.05a12.511,12.511,0,0,1,5.667,8.963,15.515,15.515,0,0,1-4.622,13.625A18.418,18.418,0,0,1,143.362,31C142.277,31.2,141.192,31.241,140.147,31.361Zm9.566-16.238a11.573,11.573,0,0,0-.121-1.326,6.621,6.621,0,0,0-8.2-5.346,8.78,8.78,0,0,0-7.034,6.994,6.619,6.619,0,0,0,3.7,7.6,7.368,7.368,0,0,0,6.551-.241A8.8,8.8,0,0,0,149.713,15.123Z" transform="translate(-125.796 -0.892)" fill="#fff"/>
        </g>
      </g>
    </g>
  </g>
</svg>